
Sensor TH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000022a6  0000233a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800122  00800122  0000235c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ca  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078e  00000000  00000000  000036fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d64  00000000  00000000  00003e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00004bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007610  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f2  00000000  00000000  0000c36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000c65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c1a  00000000  00000000  0000c6fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ea       	ldi	r30, 0xA6	; 166
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 32       	cpi	r26, 0x22	; 34
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e2       	ldi	r26, 0x22	; 34
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <main>
      9e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdcommand>:
#include "LCD16x2_4bit.h"
#define DHT11_PIN 6
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void lcdcommand(unsigned char cmnd)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	cf 56       	subi	r28, 0x6F	; 111
      b4:	d1 09       	sbc	r29, r1
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	f8 94       	cli
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	0f be       	out	0x3f, r0	; 63
      be:	cd bf       	out	0x3d, r28	; 61
      c0:	9e 01       	movw	r18, r28
      c2:	21 59       	subi	r18, 0x91	; 145
      c4:	3f 4f       	sbci	r19, 0xFF	; 255
      c6:	f9 01       	movw	r30, r18
      c8:	80 83       	st	Z, r24
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
      ca:	85 e2       	ldi	r24, 0x25	; 37
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	25 e2       	ldi	r18, 0x25	; 37
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	f9 01       	movw	r30, r18
      d4:	20 81       	ld	r18, Z
      d6:	42 2f       	mov	r20, r18
      d8:	4f 70       	andi	r20, 0x0F	; 15
      da:	9e 01       	movw	r18, r28
      dc:	21 59       	subi	r18, 0x91	; 145
      de:	3f 4f       	sbci	r19, 0xFF	; 255
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	20 7f       	andi	r18, 0xF0	; 240
      e6:	24 2b       	or	r18, r20
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
      ec:	85 e2       	ldi	r24, 0x25	; 37
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	25 e2       	ldi	r18, 0x25	; 37
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	2e 7f       	andi	r18, 0xFE	; 254
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
      fe:	85 e2       	ldi	r24, 0x25	; 37
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	25 e2       	ldi	r18, 0x25	; 37
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	f9 01       	movw	r30, r18
     108:	20 81       	ld	r18, Z
     10a:	22 60       	ori	r18, 0x02	; 2
     10c:	fc 01       	movw	r30, r24
     10e:	20 83       	st	Z, r18
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	a0 e8       	ldi	r26, 0x80	; 128
     116:	bf e3       	ldi	r27, 0x3F	; 63
     118:	89 83       	std	Y+1, r24	; 0x01
     11a:	9a 83       	std	Y+2, r25	; 0x02
     11c:	ab 83       	std	Y+3, r26	; 0x03
     11e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     120:	8e 01       	movw	r16, r28
     122:	0d 5a       	subi	r16, 0xAD	; 173
     124:	1f 4f       	sbci	r17, 0xFF	; 255
     126:	2b ea       	ldi	r18, 0xAB	; 171
     128:	3a ea       	ldi	r19, 0xAA	; 170
     12a:	4a e2       	ldi	r20, 0x2A	; 42
     12c:	50 e4       	ldi	r21, 0x40	; 64
     12e:	69 81       	ldd	r22, Y+1	; 0x01
     130:	7a 81       	ldd	r23, Y+2	; 0x02
     132:	8b 81       	ldd	r24, Y+3	; 0x03
     134:	9c 81       	ldd	r25, Y+4	; 0x04
     136:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     13a:	dc 01       	movw	r26, r24
     13c:	cb 01       	movw	r24, r22
     13e:	f8 01       	movw	r30, r16
     140:	80 83       	st	Z, r24
     142:	91 83       	std	Z+1, r25	; 0x01
     144:	a2 83       	std	Z+2, r26	; 0x02
     146:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     148:	8e 01       	movw	r16, r28
     14a:	09 5a       	subi	r16, 0xA9	; 169
     14c:	1f 4f       	sbci	r17, 0xFF	; 255
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	ab 81       	ldd	r26, Y+3	; 0x03
     154:	bc 81       	ldd	r27, Y+4	; 0x04
     156:	9c 01       	movw	r18, r24
     158:	ad 01       	movw	r20, r26
     15a:	bc 01       	movw	r22, r24
     15c:	cd 01       	movw	r24, r26
     15e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
     162:	dc 01       	movw	r26, r24
     164:	cb 01       	movw	r24, r22
     166:	f8 01       	movw	r30, r16
     168:	80 83       	st	Z, r24
     16a:	91 83       	std	Z+1, r25	; 0x01
     16c:	a2 83       	std	Z+2, r26	; 0x02
     16e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     170:	ce 01       	movw	r24, r28
     172:	8d 5a       	subi	r24, 0xAD	; 173
     174:	9f 4f       	sbci	r25, 0xFF	; 255
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e8       	ldi	r20, 0x80	; 128
     17c:	5f e3       	ldi	r21, 0x3F	; 63
     17e:	fc 01       	movw	r30, r24
     180:	60 81       	ld	r22, Z
     182:	71 81       	ldd	r23, Z+1	; 0x01
     184:	82 81       	ldd	r24, Z+2	; 0x02
     186:	93 81       	ldd	r25, Z+3	; 0x03
     188:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     18c:	88 23       	and	r24, r24
     18e:	3c f4       	brge	.+14     	; 0x19e <lcdcommand+0xf8>
		__ticks = 1;
     190:	ce 01       	movw	r24, r28
     192:	85 5a       	subi	r24, 0xA5	; 165
     194:	9f 4f       	sbci	r25, 0xFF	; 255
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	2c c1       	rjmp	.+600    	; 0x3f6 <lcdcommand+0x350>
	else if (__tmp2 > 65535)
     19e:	ce 01       	movw	r24, r28
     1a0:	89 5a       	subi	r24, 0xA9	; 169
     1a2:	9f 4f       	sbci	r25, 0xFF	; 255
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	3f ef       	ldi	r19, 0xFF	; 255
     1a8:	4f e7       	ldi	r20, 0x7F	; 127
     1aa:	57 e4       	ldi	r21, 0x47	; 71
     1ac:	fc 01       	movw	r30, r24
     1ae:	60 81       	ld	r22, Z
     1b0:	71 81       	ldd	r23, Z+1	; 0x01
     1b2:	82 81       	ldd	r24, Z+2	; 0x02
     1b4:	93 81       	ldd	r25, Z+3	; 0x03
     1b6:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     1ba:	18 16       	cp	r1, r24
     1bc:	0c f0       	brlt	.+2      	; 0x1c0 <lcdcommand+0x11a>
     1be:	cd c0       	rjmp	.+410    	; 0x35a <lcdcommand+0x2b4>
	{
		_delay_ms(__us / 1000.0);
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	4a e7       	ldi	r20, 0x7A	; 122
     1c6:	54 e4       	ldi	r21, 0x44	; 68
     1c8:	69 81       	ldd	r22, Y+1	; 0x01
     1ca:	7a 81       	ldd	r23, Y+2	; 0x02
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	9e 01       	movw	r18, r28
     1da:	24 5a       	subi	r18, 0xA4	; 164
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
     1de:	f9 01       	movw	r30, r18
     1e0:	80 83       	st	Z, r24
     1e2:	91 83       	std	Z+1, r25	; 0x01
     1e4:	a2 83       	std	Z+2, r26	; 0x02
     1e6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1e8:	8e 01       	movw	r16, r28
     1ea:	00 5a       	subi	r16, 0xA0	; 160
     1ec:	1f 4f       	sbci	r17, 0xFF	; 255
     1ee:	ce 01       	movw	r24, r28
     1f0:	84 5a       	subi	r24, 0xA4	; 164
     1f2:	9f 4f       	sbci	r25, 0xFF	; 255
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	4a ef       	ldi	r20, 0xFA	; 250
     1fa:	54 e4       	ldi	r21, 0x44	; 68
     1fc:	fc 01       	movw	r30, r24
     1fe:	60 81       	ld	r22, Z
     200:	71 81       	ldd	r23, Z+1	; 0x01
     202:	82 81       	ldd	r24, Z+2	; 0x02
     204:	93 81       	ldd	r25, Z+3	; 0x03
     206:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     20a:	dc 01       	movw	r26, r24
     20c:	cb 01       	movw	r24, r22
     20e:	f8 01       	movw	r30, r16
     210:	80 83       	st	Z, r24
     212:	91 83       	std	Z+1, r25	; 0x01
     214:	a2 83       	std	Z+2, r26	; 0x02
     216:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     218:	ce 01       	movw	r24, r28
     21a:	80 5a       	subi	r24, 0xA0	; 160
     21c:	9f 4f       	sbci	r25, 0xFF	; 255
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e8       	ldi	r20, 0x80	; 128
     224:	5f e3       	ldi	r21, 0x3F	; 63
     226:	fc 01       	movw	r30, r24
     228:	60 81       	ld	r22, Z
     22a:	71 81       	ldd	r23, Z+1	; 0x01
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	93 81       	ldd	r25, Z+3	; 0x03
     230:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	4c f4       	brge	.+18     	; 0x24a <lcdcommand+0x1a4>
		__ticks = 1;
     238:	ce 01       	movw	r24, r28
     23a:	8c 59       	subi	r24, 0x9C	; 156
     23c:	9f 4f       	sbci	r25, 0xFF	; 255
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	fc 01       	movw	r30, r24
     244:	31 83       	std	Z+1, r19	; 0x01
     246:	20 83       	st	Z, r18
     248:	6d c0       	rjmp	.+218    	; 0x324 <lcdcommand+0x27e>
	else if (__tmp > 65535)
     24a:	ce 01       	movw	r24, r28
     24c:	80 5a       	subi	r24, 0xA0	; 160
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	3f ef       	ldi	r19, 0xFF	; 255
     254:	4f e7       	ldi	r20, 0x7F	; 127
     256:	57 e4       	ldi	r21, 0x47	; 71
     258:	fc 01       	movw	r30, r24
     25a:	60 81       	ld	r22, Z
     25c:	71 81       	ldd	r23, Z+1	; 0x01
     25e:	82 81       	ldd	r24, Z+2	; 0x02
     260:	93 81       	ldd	r25, Z+3	; 0x03
     262:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     266:	18 16       	cp	r1, r24
     268:	0c f0       	brlt	.+2      	; 0x26c <lcdcommand+0x1c6>
     26a:	4a c0       	rjmp	.+148    	; 0x300 <lcdcommand+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     26c:	ce 01       	movw	r24, r28
     26e:	84 5a       	subi	r24, 0xA4	; 164
     270:	9f 4f       	sbci	r25, 0xFF	; 255
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	40 e2       	ldi	r20, 0x20	; 32
     278:	51 e4       	ldi	r21, 0x41	; 65
     27a:	fc 01       	movw	r30, r24
     27c:	60 81       	ld	r22, Z
     27e:	71 81       	ldd	r23, Z+1	; 0x01
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	93 81       	ldd	r25, Z+3	; 0x03
     284:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	8e 01       	movw	r16, r28
     28e:	0c 59       	subi	r16, 0x9C	; 156
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	bc 01       	movw	r22, r24
     294:	cd 01       	movw	r24, r26
     296:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	f8 01       	movw	r30, r16
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	80 83       	st	Z, r24
     2a4:	24 c0       	rjmp	.+72     	; 0x2ee <lcdcommand+0x248>
     2a6:	ce 01       	movw	r24, r28
     2a8:	8a 59       	subi	r24, 0x9A	; 154
     2aa:	9f 4f       	sbci	r25, 0xFF	; 255
     2ac:	28 ec       	ldi	r18, 0xC8	; 200
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	31 83       	std	Z+1, r19	; 0x01
     2b4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b6:	ce 01       	movw	r24, r28
     2b8:	8a 59       	subi	r24, 0x9A	; 154
     2ba:	9f 4f       	sbci	r25, 0xFF	; 255
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcdcommand+0x21c>
     2c6:	9e 01       	movw	r18, r28
     2c8:	2a 59       	subi	r18, 0x9A	; 154
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	f9 01       	movw	r30, r18
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d2:	ce 01       	movw	r24, r28
     2d4:	8c 59       	subi	r24, 0x9C	; 156
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	9e 01       	movw	r18, r28
     2da:	2c 59       	subi	r18, 0x9C	; 156
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	31 81       	ldd	r19, Z+1	; 0x01
     2e4:	21 50       	subi	r18, 0x01	; 1
     2e6:	31 09       	sbc	r19, r1
     2e8:	fc 01       	movw	r30, r24
     2ea:	31 83       	std	Z+1, r19	; 0x01
     2ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ee:	ce 01       	movw	r24, r28
     2f0:	8c 59       	subi	r24, 0x9C	; 156
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	fc 01       	movw	r30, r24
     2f6:	80 81       	ld	r24, Z
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	89 2b       	or	r24, r25
     2fc:	a1 f6       	brne	.-88     	; 0x2a6 <lcdcommand+0x200>
     2fe:	7b c0       	rjmp	.+246    	; 0x3f6 <lcdcommand+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     300:	8e 01       	movw	r16, r28
     302:	0c 59       	subi	r16, 0x9C	; 156
     304:	1f 4f       	sbci	r17, 0xFF	; 255
     306:	ce 01       	movw	r24, r28
     308:	80 5a       	subi	r24, 0xA0	; 160
     30a:	9f 4f       	sbci	r25, 0xFF	; 255
     30c:	fc 01       	movw	r30, r24
     30e:	60 81       	ld	r22, Z
     310:	71 81       	ldd	r23, Z+1	; 0x01
     312:	82 81       	ldd	r24, Z+2	; 0x02
     314:	93 81       	ldd	r25, Z+3	; 0x03
     316:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	f8 01       	movw	r30, r16
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	ce 01       	movw	r24, r28
     326:	88 59       	subi	r24, 0x98	; 152
     328:	9f 4f       	sbci	r25, 0xFF	; 255
     32a:	9e 01       	movw	r18, r28
     32c:	2c 59       	subi	r18, 0x9C	; 156
     32e:	3f 4f       	sbci	r19, 0xFF	; 255
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	fc 01       	movw	r30, r24
     338:	31 83       	std	Z+1, r19	; 0x01
     33a:	20 83       	st	Z, r18
     33c:	ce 01       	movw	r24, r28
     33e:	88 59       	subi	r24, 0x98	; 152
     340:	9f 4f       	sbci	r25, 0xFF	; 255
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcdcommand+0x2a2>
     34c:	9e 01       	movw	r18, r28
     34e:	28 59       	subi	r18, 0x98	; 152
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	f9 01       	movw	r30, r18
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	80 83       	st	Z, r24
     358:	4e c0       	rjmp	.+156    	; 0x3f6 <lcdcommand+0x350>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     35a:	ce 01       	movw	r24, r28
     35c:	8d 5a       	subi	r24, 0xAD	; 173
     35e:	9f 4f       	sbci	r25, 0xFF	; 255
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	4f e7       	ldi	r20, 0x7F	; 127
     366:	53 e4       	ldi	r21, 0x43	; 67
     368:	fc 01       	movw	r30, r24
     36a:	60 81       	ld	r22, Z
     36c:	71 81       	ldd	r23, Z+1	; 0x01
     36e:	82 81       	ldd	r24, Z+2	; 0x02
     370:	93 81       	ldd	r25, Z+3	; 0x03
     372:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     376:	18 16       	cp	r1, r24
     378:	6c f5       	brge	.+90     	; 0x3d4 <lcdcommand+0x32e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     37a:	8e 01       	movw	r16, r28
     37c:	06 59       	subi	r16, 0x96	; 150
     37e:	1f 4f       	sbci	r17, 0xFF	; 255
     380:	ce 01       	movw	r24, r28
     382:	89 5a       	subi	r24, 0xA9	; 169
     384:	9f 4f       	sbci	r25, 0xFF	; 255
     386:	fc 01       	movw	r30, r24
     388:	60 81       	ld	r22, Z
     38a:	71 81       	ldd	r23, Z+1	; 0x01
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	93 81       	ldd	r25, Z+3	; 0x03
     390:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
     39e:	ce 01       	movw	r24, r28
     3a0:	84 59       	subi	r24, 0x94	; 148
     3a2:	9f 4f       	sbci	r25, 0xFF	; 255
     3a4:	9e 01       	movw	r18, r28
     3a6:	26 59       	subi	r18, 0x96	; 150
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	31 81       	ldd	r19, Z+1	; 0x01
     3b0:	fc 01       	movw	r30, r24
     3b2:	31 83       	std	Z+1, r19	; 0x01
     3b4:	20 83       	st	Z, r18
     3b6:	ce 01       	movw	r24, r28
     3b8:	84 59       	subi	r24, 0x94	; 148
     3ba:	9f 4f       	sbci	r25, 0xFF	; 255
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	91 81       	ldd	r25, Z+1	; 0x01
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcdcommand+0x31c>
     3c6:	9e 01       	movw	r18, r28
     3c8:	24 59       	subi	r18, 0x94	; 148
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	f9 01       	movw	r30, r18
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	80 83       	st	Z, r24
     3d2:	28 c0       	rjmp	.+80     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3d4:	8e 01       	movw	r16, r28
     3d6:	05 5a       	subi	r16, 0xA5	; 165
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	ce 01       	movw	r24, r28
     3dc:	8d 5a       	subi	r24, 0xAD	; 173
     3de:	9f 4f       	sbci	r25, 0xFF	; 255
     3e0:	fc 01       	movw	r30, r24
     3e2:	60 81       	ld	r22, Z
     3e4:	71 81       	ldd	r23, Z+1	; 0x01
     3e6:	82 81       	ldd	r24, Z+2	; 0x02
     3e8:	93 81       	ldd	r25, Z+3	; 0x03
     3ea:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	f8 01       	movw	r30, r16
     3f4:	80 83       	st	Z, r24
     3f6:	ce 01       	movw	r24, r28
     3f8:	82 59       	subi	r24, 0x92	; 146
     3fa:	9f 4f       	sbci	r25, 0xFF	; 255
     3fc:	9e 01       	movw	r18, r28
     3fe:	25 5a       	subi	r18, 0xA5	; 165
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     40a:	ce 01       	movw	r24, r28
     40c:	82 59       	subi	r24, 0x92	; 146
     40e:	9f 4f       	sbci	r25, 0xFF	; 255
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	28 2f       	mov	r18, r24
     416:	2a 95       	dec	r18
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	ce 01       	movw	r24, r28
     41c:	82 59       	subi	r24, 0x92	; 146
     41e:	9f 4f       	sbci	r25, 0xFF	; 255
     420:	fc 01       	movw	r30, r24
     422:	20 83       	st	Z, r18
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     424:	85 e2       	ldi	r24, 0x25	; 37
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	25 e2       	ldi	r18, 0x25	; 37
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	f9 01       	movw	r30, r18
     42e:	20 81       	ld	r18, Z
     430:	2d 7f       	andi	r18, 0xFD	; 253
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a8 ec       	ldi	r26, 0xC8	; 200
     43c:	b2 e4       	ldi	r27, 0x42	; 66
     43e:	8d 83       	std	Y+5, r24	; 0x05
     440:	9e 83       	std	Y+6, r25	; 0x06
     442:	af 83       	std	Y+7, r26	; 0x07
     444:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     446:	2b ea       	ldi	r18, 0xAB	; 171
     448:	3a ea       	ldi	r19, 0xAA	; 170
     44a:	4a e2       	ldi	r20, 0x2A	; 42
     44c:	50 e4       	ldi	r21, 0x40	; 64
     44e:	6d 81       	ldd	r22, Y+5	; 0x05
     450:	7e 81       	ldd	r23, Y+6	; 0x06
     452:	8f 81       	ldd	r24, Y+7	; 0x07
     454:	98 85       	ldd	r25, Y+8	; 0x08
     456:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	8f ab       	std	Y+55, r24	; 0x37
     460:	98 af       	std	Y+56, r25	; 0x38
     462:	a9 af       	std	Y+57, r26	; 0x39
     464:	ba af       	std	Y+58, r27	; 0x3a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     466:	8d 81       	ldd	r24, Y+5	; 0x05
     468:	9e 81       	ldd	r25, Y+6	; 0x06
     46a:	af 81       	ldd	r26, Y+7	; 0x07
     46c:	b8 85       	ldd	r27, Y+8	; 0x08
     46e:	9c 01       	movw	r18, r24
     470:	ad 01       	movw	r20, r26
     472:	bc 01       	movw	r22, r24
     474:	cd 01       	movw	r24, r26
     476:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
     47a:	dc 01       	movw	r26, r24
     47c:	cb 01       	movw	r24, r22
     47e:	8b af       	std	Y+59, r24	; 0x3b
     480:	9c af       	std	Y+60, r25	; 0x3c
     482:	ad af       	std	Y+61, r26	; 0x3d
     484:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e8       	ldi	r20, 0x80	; 128
     48c:	5f e3       	ldi	r21, 0x3F	; 63
     48e:	6f a9       	ldd	r22, Y+55	; 0x37
     490:	78 ad       	ldd	r23, Y+56	; 0x38
     492:	89 ad       	ldd	r24, Y+57	; 0x39
     494:	9a ad       	ldd	r25, Y+58	; 0x3a
     496:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     49a:	88 23       	and	r24, r24
     49c:	1c f4       	brge	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		__ticks = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8f af       	std	Y+63, r24	; 0x3f
     4a2:	18 c1       	rjmp	.+560    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
	else if (__tmp2 > 65535)
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	3f ef       	ldi	r19, 0xFF	; 255
     4a8:	4f e7       	ldi	r20, 0x7F	; 127
     4aa:	57 e4       	ldi	r21, 0x47	; 71
     4ac:	6b ad       	ldd	r22, Y+59	; 0x3b
     4ae:	7c ad       	ldd	r23, Y+60	; 0x3c
     4b0:	8d ad       	ldd	r24, Y+61	; 0x3d
     4b2:	9e ad       	ldd	r25, Y+62	; 0x3e
     4b4:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     4b8:	18 16       	cp	r1, r24
     4ba:	0c f0       	brlt	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	cd c0       	rjmp	.+410    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
	{
		_delay_ms(__us / 1000.0);
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4a e7       	ldi	r20, 0x7A	; 122
     4c4:	54 e4       	ldi	r21, 0x44	; 68
     4c6:	6d 81       	ldd	r22, Y+5	; 0x05
     4c8:	7e 81       	ldd	r23, Y+6	; 0x06
     4ca:	8f 81       	ldd	r24, Y+7	; 0x07
     4cc:	98 85       	ldd	r25, Y+8	; 0x08
     4ce:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	9e 01       	movw	r18, r28
     4d8:	20 5c       	subi	r18, 0xC0	; 192
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	f9 01       	movw	r30, r18
     4de:	80 83       	st	Z, r24
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	a2 83       	std	Z+2, r26	; 0x02
     4e4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	8e 01       	movw	r16, r28
     4e8:	0c 5b       	subi	r16, 0xBC	; 188
     4ea:	1f 4f       	sbci	r17, 0xFF	; 255
     4ec:	ce 01       	movw	r24, r28
     4ee:	80 5c       	subi	r24, 0xC0	; 192
     4f0:	9f 4f       	sbci	r25, 0xFF	; 255
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	4a ef       	ldi	r20, 0xFA	; 250
     4f8:	54 e4       	ldi	r21, 0x44	; 68
     4fa:	fc 01       	movw	r30, r24
     4fc:	60 81       	ld	r22, Z
     4fe:	71 81       	ldd	r23, Z+1	; 0x01
     500:	82 81       	ldd	r24, Z+2	; 0x02
     502:	93 81       	ldd	r25, Z+3	; 0x03
     504:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	ce 01       	movw	r24, r28
     518:	8c 5b       	subi	r24, 0xBC	; 188
     51a:	9f 4f       	sbci	r25, 0xFF	; 255
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	fc 01       	movw	r30, r24
     526:	60 81       	ld	r22, Z
     528:	71 81       	ldd	r23, Z+1	; 0x01
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     532:	88 23       	and	r24, r24
     534:	4c f4       	brge	.+18     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		__ticks = 1;
     536:	ce 01       	movw	r24, r28
     538:	88 5b       	subi	r24, 0xB8	; 184
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	fc 01       	movw	r30, r24
     542:	31 83       	std	Z+1, r19	; 0x01
     544:	20 83       	st	Z, r18
     546:	6d c0       	rjmp	.+218    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
	else if (__tmp > 65535)
     548:	ce 01       	movw	r24, r28
     54a:	8c 5b       	subi	r24, 0xBC	; 188
     54c:	9f 4f       	sbci	r25, 0xFF	; 255
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	3f ef       	ldi	r19, 0xFF	; 255
     552:	4f e7       	ldi	r20, 0x7F	; 127
     554:	57 e4       	ldi	r21, 0x47	; 71
     556:	fc 01       	movw	r30, r24
     558:	60 81       	ld	r22, Z
     55a:	71 81       	ldd	r23, Z+1	; 0x01
     55c:	82 81       	ldd	r24, Z+2	; 0x02
     55e:	93 81       	ldd	r25, Z+3	; 0x03
     560:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     564:	18 16       	cp	r1, r24
     566:	0c f0       	brlt	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	4a c0       	rjmp	.+148    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     56a:	ce 01       	movw	r24, r28
     56c:	80 5c       	subi	r24, 0xC0	; 192
     56e:	9f 4f       	sbci	r25, 0xFF	; 255
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e2       	ldi	r20, 0x20	; 32
     576:	51 e4       	ldi	r21, 0x41	; 65
     578:	fc 01       	movw	r30, r24
     57a:	60 81       	ld	r22, Z
     57c:	71 81       	ldd	r23, Z+1	; 0x01
     57e:	82 81       	ldd	r24, Z+2	; 0x02
     580:	93 81       	ldd	r25, Z+3	; 0x03
     582:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	8e 01       	movw	r16, r28
     58c:	08 5b       	subi	r16, 0xB8	; 184
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	bc 01       	movw	r22, r24
     592:	cd 01       	movw	r24, r26
     594:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	f8 01       	movw	r30, r16
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	80 83       	st	Z, r24
     5a2:	24 c0       	rjmp	.+72     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5a4:	ce 01       	movw	r24, r28
     5a6:	86 5b       	subi	r24, 0xB6	; 182
     5a8:	9f 4f       	sbci	r25, 0xFF	; 255
     5aa:	28 ec       	ldi	r18, 0xC8	; 200
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	31 83       	std	Z+1, r19	; 0x01
     5b2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b4:	ce 01       	movw	r24, r28
     5b6:	86 5b       	subi	r24, 0xB6	; 182
     5b8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ba:	fc 01       	movw	r30, r24
     5bc:	80 81       	ld	r24, Z
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5c4:	9e 01       	movw	r18, r28
     5c6:	26 5b       	subi	r18, 0xB6	; 182
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	f9 01       	movw	r30, r18
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d0:	ce 01       	movw	r24, r28
     5d2:	88 5b       	subi	r24, 0xB8	; 184
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	9e 01       	movw	r18, r28
     5d8:	28 5b       	subi	r18, 0xB8	; 184
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	f9 01       	movw	r30, r18
     5de:	20 81       	ld	r18, Z
     5e0:	31 81       	ldd	r19, Z+1	; 0x01
     5e2:	21 50       	subi	r18, 0x01	; 1
     5e4:	31 09       	sbc	r19, r1
     5e6:	fc 01       	movw	r30, r24
     5e8:	31 83       	std	Z+1, r19	; 0x01
     5ea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ec:	ce 01       	movw	r24, r28
     5ee:	88 5b       	subi	r24, 0xB8	; 184
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	89 2b       	or	r24, r25
     5fa:	a1 f6       	brne	.-88     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     5fc:	6b c0       	rjmp	.+214    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fe:	8e 01       	movw	r16, r28
     600:	08 5b       	subi	r16, 0xB8	; 184
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	ce 01       	movw	r24, r28
     606:	8c 5b       	subi	r24, 0xBC	; 188
     608:	9f 4f       	sbci	r25, 0xFF	; 255
     60a:	fc 01       	movw	r30, r24
     60c:	60 81       	ld	r22, Z
     60e:	71 81       	ldd	r23, Z+1	; 0x01
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	93 81       	ldd	r25, Z+3	; 0x03
     614:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	f8 01       	movw	r30, r16
     61e:	91 83       	std	Z+1, r25	; 0x01
     620:	80 83       	st	Z, r24
     622:	ce 01       	movw	r24, r28
     624:	84 5b       	subi	r24, 0xB4	; 180
     626:	9f 4f       	sbci	r25, 0xFF	; 255
     628:	9e 01       	movw	r18, r28
     62a:	28 5b       	subi	r18, 0xB8	; 184
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
     62e:	f9 01       	movw	r30, r18
     630:	20 81       	ld	r18, Z
     632:	31 81       	ldd	r19, Z+1	; 0x01
     634:	fc 01       	movw	r30, r24
     636:	31 83       	std	Z+1, r19	; 0x01
     638:	20 83       	st	Z, r18
     63a:	ce 01       	movw	r24, r28
     63c:	84 5b       	subi	r24, 0xB4	; 180
     63e:	9f 4f       	sbci	r25, 0xFF	; 255
     640:	fc 01       	movw	r30, r24
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     64a:	9e 01       	movw	r18, r28
     64c:	24 5b       	subi	r18, 0xB4	; 180
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	f9 01       	movw	r30, r18
     652:	91 83       	std	Z+1, r25	; 0x01
     654:	80 83       	st	Z, r24
     656:	3e c0       	rjmp	.+124    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	4f e7       	ldi	r20, 0x7F	; 127
     65e:	53 e4       	ldi	r21, 0x43	; 67
     660:	6f a9       	ldd	r22, Y+55	; 0x37
     662:	78 ad       	ldd	r23, Y+56	; 0x38
     664:	89 ad       	ldd	r24, Y+57	; 0x39
     666:	9a ad       	ldd	r25, Y+58	; 0x3a
     668:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     66c:	18 16       	cp	r1, r24
     66e:	4c f5       	brge	.+82     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     670:	8e 01       	movw	r16, r28
     672:	02 5b       	subi	r16, 0xB2	; 178
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	6b ad       	ldd	r22, Y+59	; 0x3b
     678:	7c ad       	ldd	r23, Y+60	; 0x3c
     67a:	8d ad       	ldd	r24, Y+61	; 0x3d
     67c:	9e ad       	ldd	r25, Y+62	; 0x3e
     67e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	f8 01       	movw	r30, r16
     688:	91 83       	std	Z+1, r25	; 0x01
     68a:	80 83       	st	Z, r24
     68c:	ce 01       	movw	r24, r28
     68e:	80 5b       	subi	r24, 0xB0	; 176
     690:	9f 4f       	sbci	r25, 0xFF	; 255
     692:	9e 01       	movw	r18, r28
     694:	22 5b       	subi	r18, 0xB2	; 178
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	f9 01       	movw	r30, r18
     69a:	20 81       	ld	r18, Z
     69c:	31 81       	ldd	r19, Z+1	; 0x01
     69e:	fc 01       	movw	r30, r24
     6a0:	31 83       	std	Z+1, r19	; 0x01
     6a2:	20 83       	st	Z, r18
     6a4:	ce 01       	movw	r24, r28
     6a6:	80 5b       	subi	r24, 0xB0	; 176
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     6b4:	9e 01       	movw	r18, r28
     6b6:	20 5b       	subi	r18, 0xB0	; 176
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	f9 01       	movw	r30, r18
     6bc:	91 83       	std	Z+1, r25	; 0x01
     6be:	80 83       	st	Z, r24
     6c0:	1c c0       	rjmp	.+56     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6c2:	6f a9       	ldd	r22, Y+55	; 0x37
     6c4:	78 ad       	ldd	r23, Y+56	; 0x38
     6c6:	89 ad       	ldd	r24, Y+57	; 0x39
     6c8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ca:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	8f af       	std	Y+63, r24	; 0x3f
     6d4:	ce 01       	movw	r24, r28
     6d6:	8e 5a       	subi	r24, 0xAE	; 174
     6d8:	9f 4f       	sbci	r25, 0xFF	; 255
     6da:	2f ad       	ldd	r18, Y+63	; 0x3f
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6e0:	ce 01       	movw	r24, r28
     6e2:	8e 5a       	subi	r24, 0xAE	; 174
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	28 2f       	mov	r18, r24
     6ec:	2a 95       	dec	r18
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6f0:	ce 01       	movw	r24, r28
     6f2:	8e 5a       	subi	r24, 0xAE	; 174
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
     6fa:	85 e2       	ldi	r24, 0x25	; 37
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	25 e2       	ldi	r18, 0x25	; 37
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	42 2f       	mov	r20, r18
     708:	4f 70       	andi	r20, 0x0F	; 15
     70a:	9e 01       	movw	r18, r28
     70c:	21 59       	subi	r18, 0x91	; 145
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	22 2f       	mov	r18, r18
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	22 95       	swap	r18
     71a:	32 95       	swap	r19
     71c:	30 7f       	andi	r19, 0xF0	; 240
     71e:	32 27       	eor	r19, r18
     720:	20 7f       	andi	r18, 0xF0	; 240
     722:	32 27       	eor	r19, r18
     724:	24 2b       	or	r18, r20
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
     72a:	85 e2       	ldi	r24, 0x25	; 37
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	25 e2       	ldi	r18, 0x25	; 37
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	22 60       	ori	r18, 0x02	; 2
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e8       	ldi	r26, 0x80	; 128
     742:	bf e3       	ldi	r27, 0x3F	; 63
     744:	89 87       	std	Y+9, r24	; 0x09
     746:	9a 87       	std	Y+10, r25	; 0x0a
     748:	ab 87       	std	Y+11, r26	; 0x0b
     74a:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     74c:	2b ea       	ldi	r18, 0xAB	; 171
     74e:	3a ea       	ldi	r19, 0xAA	; 170
     750:	4a e2       	ldi	r20, 0x2A	; 42
     752:	50 e4       	ldi	r21, 0x40	; 64
     754:	69 85       	ldd	r22, Y+9	; 0x09
     756:	7a 85       	ldd	r23, Y+10	; 0x0a
     758:	8b 85       	ldd	r24, Y+11	; 0x0b
     75a:	9c 85       	ldd	r25, Y+12	; 0x0c
     75c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	8b 8f       	std	Y+27, r24	; 0x1b
     766:	9c 8f       	std	Y+28, r25	; 0x1c
     768:	ad 8f       	std	Y+29, r26	; 0x1d
     76a:	be 8f       	std	Y+30, r27	; 0x1e
	__tmp2 = ((F_CPU) / 4e6) * __us;
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	9a 85       	ldd	r25, Y+10	; 0x0a
     770:	ab 85       	ldd	r26, Y+11	; 0x0b
     772:	bc 85       	ldd	r27, Y+12	; 0x0c
     774:	9c 01       	movw	r18, r24
     776:	ad 01       	movw	r20, r26
     778:	bc 01       	movw	r22, r24
     77a:	cd 01       	movw	r24, r26
     77c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	8f 8f       	std	Y+31, r24	; 0x1f
     786:	98 a3       	std	Y+32, r25	; 0x20
     788:	a9 a3       	std	Y+33, r26	; 0x21
     78a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e8       	ldi	r20, 0x80	; 128
     792:	5f e3       	ldi	r21, 0x3F	; 63
     794:	6b 8d       	ldd	r22, Y+27	; 0x1b
     796:	7c 8d       	ldd	r23, Y+28	; 0x1c
     798:	8d 8d       	ldd	r24, Y+29	; 0x1d
     79a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     79c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     7a0:	88 23       	and	r24, r24
     7a2:	1c f4       	brge	.+6      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
		__ticks = 1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	8b a3       	std	Y+35, r24	; 0x23
     7a8:	b2 c0       	rjmp	.+356    	; 0x90e <__stack+0xf>
	else if (__tmp2 > 65535)
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	3f ef       	ldi	r19, 0xFF	; 255
     7ae:	4f e7       	ldi	r20, 0x7F	; 127
     7b0:	57 e4       	ldi	r21, 0x47	; 71
     7b2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     7b4:	78 a1       	ldd	r23, Y+32	; 0x20
     7b6:	89 a1       	ldd	r24, Y+33	; 0x21
     7b8:	9a a1       	ldd	r25, Y+34	; 0x22
     7ba:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     7be:	18 16       	cp	r1, r24
     7c0:	0c f0       	brlt	.+2      	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
     7c2:	7b c0       	rjmp	.+246    	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
	{
		_delay_ms(__us / 1000.0);
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	4a e7       	ldi	r20, 0x7A	; 122
     7ca:	54 e4       	ldi	r21, 0x44	; 68
     7cc:	69 85       	ldd	r22, Y+9	; 0x09
     7ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	8c a3       	std	Y+36, r24	; 0x24
     7de:	9d a3       	std	Y+37, r25	; 0x25
     7e0:	ae a3       	std	Y+38, r26	; 0x26
     7e2:	bf a3       	std	Y+39, r27	; 0x27

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	4a ef       	ldi	r20, 0xFA	; 250
     7ea:	54 e4       	ldi	r21, 0x44	; 68
     7ec:	6c a1       	ldd	r22, Y+36	; 0x24
     7ee:	7d a1       	ldd	r23, Y+37	; 0x25
     7f0:	8e a1       	ldd	r24, Y+38	; 0x26
     7f2:	9f a1       	ldd	r25, Y+39	; 0x27
     7f4:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	88 a7       	std	Y+40, r24	; 0x28
     7fe:	99 a7       	std	Y+41, r25	; 0x29
     800:	aa a7       	std	Y+42, r26	; 0x2a
     802:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	68 a5       	ldd	r22, Y+40	; 0x28
     80e:	79 a5       	ldd	r23, Y+41	; 0x29
     810:	8a a5       	ldd	r24, Y+42	; 0x2a
     812:	9b a5       	ldd	r25, Y+43	; 0x2b
     814:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     818:	88 23       	and	r24, r24
     81a:	2c f4       	brge	.+10     	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
		__ticks = 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	9d a7       	std	Y+45, r25	; 0x2d
     822:	8c a7       	std	Y+44, r24	; 0x2c
     824:	3f c0       	rjmp	.+126    	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
	else if (__tmp > 65535)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	3f ef       	ldi	r19, 0xFF	; 255
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	57 e4       	ldi	r21, 0x47	; 71
     82e:	68 a5       	ldd	r22, Y+40	; 0x28
     830:	79 a5       	ldd	r23, Y+41	; 0x29
     832:	8a a5       	ldd	r24, Y+42	; 0x2a
     834:	9b a5       	ldd	r25, Y+43	; 0x2b
     836:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     83a:	18 16       	cp	r1, r24
     83c:	4c f5       	brge	.+82     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e2       	ldi	r20, 0x20	; 32
     844:	51 e4       	ldi	r21, 0x41	; 65
     846:	6c a1       	ldd	r22, Y+36	; 0x24
     848:	7d a1       	ldd	r23, Y+37	; 0x25
     84a:	8e a1       	ldd	r24, Y+38	; 0x26
     84c:	9f a1       	ldd	r25, Y+39	; 0x27
     84e:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	9d a7       	std	Y+45, r25	; 0x2d
     864:	8c a7       	std	Y+44, r24	; 0x2c
     866:	0f c0       	rjmp	.+30     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	9f a7       	std	Y+47, r25	; 0x2f
     86e:	8e a7       	std	Y+46, r24	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     870:	8e a5       	ldd	r24, Y+46	; 0x2e
     872:	9f a5       	ldd	r25, Y+47	; 0x2f
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <__LOCK_REGION_LENGTH__+0x474>
     878:	9f a7       	std	Y+47, r25	; 0x2f
     87a:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87c:	8c a5       	ldd	r24, Y+44	; 0x2c
     87e:	9d a5       	ldd	r25, Y+45	; 0x2d
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	9d a7       	std	Y+45, r25	; 0x2d
     884:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     886:	8c a5       	ldd	r24, Y+44	; 0x2c
     888:	9d a5       	ldd	r25, Y+45	; 0x2d
     88a:	89 2b       	or	r24, r25
     88c:	69 f7       	brne	.-38     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     88e:	3f c0       	rjmp	.+126    	; 0x90e <__stack+0xf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     890:	68 a5       	ldd	r22, Y+40	; 0x28
     892:	79 a5       	ldd	r23, Y+41	; 0x29
     894:	8a a5       	ldd	r24, Y+42	; 0x2a
     896:	9b a5       	ldd	r25, Y+43	; 0x2b
     898:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	9d a7       	std	Y+45, r25	; 0x2d
     8a2:	8c a7       	std	Y+44, r24	; 0x2c
     8a4:	8c a5       	ldd	r24, Y+44	; 0x2c
     8a6:	9d a5       	ldd	r25, Y+45	; 0x2d
     8a8:	99 ab       	std	Y+49, r25	; 0x31
     8aa:	88 ab       	std	Y+48, r24	; 0x30
     8ac:	88 a9       	ldd	r24, Y+48	; 0x30
     8ae:	99 a9       	ldd	r25, Y+49	; 0x31
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
     8b4:	99 ab       	std	Y+49, r25	; 0x31
     8b6:	88 ab       	std	Y+48, r24	; 0x30
     8b8:	2a c0       	rjmp	.+84     	; 0x90e <__stack+0xf>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	4f e7       	ldi	r20, 0x7F	; 127
     8c0:	53 e4       	ldi	r21, 0x43	; 67
     8c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     8c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     8c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8ca:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     8ce:	18 16       	cp	r1, r24
     8d0:	ac f4       	brge	.+42     	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     8d4:	78 a1       	ldd	r23, Y+32	; 0x20
     8d6:	89 a1       	ldd	r24, Y+33	; 0x21
     8d8:	9a a1       	ldd	r25, Y+34	; 0x22
     8da:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9b ab       	std	Y+51, r25	; 0x33
     8e4:	8a ab       	std	Y+50, r24	; 0x32
     8e6:	8a a9       	ldd	r24, Y+50	; 0x32
     8e8:	9b a9       	ldd	r25, Y+51	; 0x33
     8ea:	9d ab       	std	Y+53, r25	; 0x35
     8ec:	8c ab       	std	Y+52, r24	; 0x34
     8ee:	8c a9       	ldd	r24, Y+52	; 0x34
     8f0:	9d a9       	ldd	r25, Y+53	; 0x35
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
     8f6:	9d ab       	std	Y+53, r25	; 0x35
     8f8:	8c ab       	std	Y+52, r24	; 0x34
     8fa:	0f c0       	rjmp	.+30     	; 0x91a <__stack+0x1b>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8fc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     8fe:	7c 8d       	ldd	r23, Y+28	; 0x1c
     900:	8d 8d       	ldd	r24, Y+29	; 0x1d
     902:	9e 8d       	ldd	r25, Y+30	; 0x1e
     904:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	8b a3       	std	Y+35, r24	; 0x23
     90e:	8b a1       	ldd	r24, Y+35	; 0x23
     910:	8e ab       	std	Y+54, r24	; 0x36
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     912:	8e a9       	ldd	r24, Y+54	; 0x36
     914:	8a 95       	dec	r24
     916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0x15>
     918:	8e ab       	std	Y+54, r24	; 0x36
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     91a:	85 e2       	ldi	r24, 0x25	; 37
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	25 e2       	ldi	r18, 0x25	; 37
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	f9 01       	movw	r30, r18
     924:	20 81       	ld	r18, Z
     926:	2d 7f       	andi	r18, 0xFD	; 253
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	8d 87       	std	Y+13, r24	; 0x0d
     936:	9e 87       	std	Y+14, r25	; 0x0e
     938:	af 87       	std	Y+15, r26	; 0x0f
     93a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	4a ef       	ldi	r20, 0xFA	; 250
     942:	54 e4       	ldi	r21, 0x44	; 68
     944:	6d 85       	ldd	r22, Y+13	; 0x0d
     946:	7e 85       	ldd	r23, Y+14	; 0x0e
     948:	8f 85       	ldd	r24, Y+15	; 0x0f
     94a:	98 89       	ldd	r25, Y+16	; 0x10
     94c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	89 8b       	std	Y+17, r24	; 0x11
     956:	9a 8b       	std	Y+18, r25	; 0x12
     958:	ab 8b       	std	Y+19, r26	; 0x13
     95a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e8       	ldi	r20, 0x80	; 128
     962:	5f e3       	ldi	r21, 0x3F	; 63
     964:	69 89       	ldd	r22, Y+17	; 0x11
     966:	7a 89       	ldd	r23, Y+18	; 0x12
     968:	8b 89       	ldd	r24, Y+19	; 0x13
     96a:	9c 89       	ldd	r25, Y+20	; 0x14
     96c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	2c f4       	brge	.+10     	; 0x97e <__stack+0x7f>
		__ticks = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	9e 8b       	std	Y+22, r25	; 0x16
     97a:	8d 8b       	std	Y+21, r24	; 0x15
     97c:	3f c0       	rjmp	.+126    	; 0x9fc <__stack+0xfd>
	else if (__tmp > 65535)
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	3f ef       	ldi	r19, 0xFF	; 255
     982:	4f e7       	ldi	r20, 0x7F	; 127
     984:	57 e4       	ldi	r21, 0x47	; 71
     986:	69 89       	ldd	r22, Y+17	; 0x11
     988:	7a 89       	ldd	r23, Y+18	; 0x12
     98a:	8b 89       	ldd	r24, Y+19	; 0x13
     98c:	9c 89       	ldd	r25, Y+20	; 0x14
     98e:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     992:	18 16       	cp	r1, r24
     994:	4c f5       	brge	.+82     	; 0x9e8 <__stack+0xe9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e2       	ldi	r20, 0x20	; 32
     99c:	51 e4       	ldi	r21, 0x41	; 65
     99e:	6d 85       	ldd	r22, Y+13	; 0x0d
     9a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     9a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a4:	98 89       	ldd	r25, Y+16	; 0x10
     9a6:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9e 8b       	std	Y+22, r25	; 0x16
     9bc:	8d 8b       	std	Y+21, r24	; 0x15
     9be:	0f c0       	rjmp	.+30     	; 0x9de <__stack+0xdf>
     9c0:	88 ec       	ldi	r24, 0xC8	; 200
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	98 8f       	std	Y+24, r25	; 0x18
     9c6:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <__stack+0xcd>
     9d0:	98 8f       	std	Y+24, r25	; 0x18
     9d2:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d4:	8d 89       	ldd	r24, Y+21	; 0x15
     9d6:	9e 89       	ldd	r25, Y+22	; 0x16
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	9e 8b       	std	Y+22, r25	; 0x16
     9dc:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9de:	8d 89       	ldd	r24, Y+21	; 0x15
     9e0:	9e 89       	ldd	r25, Y+22	; 0x16
     9e2:	89 2b       	or	r24, r25
     9e4:	69 f7       	brne	.-38     	; 0x9c0 <__stack+0xc1>
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE */
}
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <__stack+0x111>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e8:	69 89       	ldd	r22, Y+17	; 0x11
     9ea:	7a 89       	ldd	r23, Y+18	; 0x12
     9ec:	8b 89       	ldd	r24, Y+19	; 0x13
     9ee:	9c 89       	ldd	r25, Y+20	; 0x14
     9f0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	9e 8b       	std	Y+22, r25	; 0x16
     9fa:	8d 8b       	std	Y+21, r24	; 0x15
     9fc:	8d 89       	ldd	r24, Y+21	; 0x15
     9fe:	9e 89       	ldd	r25, Y+22	; 0x16
     a00:	9a 8f       	std	Y+26, r25	; 0x1a
     a02:	89 8f       	std	Y+25, r24	; 0x19
     a04:	89 8d       	ldd	r24, Y+25	; 0x19
     a06:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <__stack+0x109>
     a0c:	9a 8f       	std	Y+26, r25	; 0x1a
     a0e:	89 8f       	std	Y+25, r24	; 0x19
     a10:	00 00       	nop
     a12:	c1 59       	subi	r28, 0x91	; 145
     a14:	df 4f       	sbci	r29, 0xFF	; 255
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <lcddata>:

void lcddata(unsigned char data)
{
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	cf 56       	subi	r28, 0x6F	; 111
     a38:	d1 09       	sbc	r29, r1
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	9e 01       	movw	r18, r28
     a46:	21 59       	subi	r18, 0x91	; 145
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	f9 01       	movw	r30, r18
     a4c:	80 83       	st	Z, r24
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
     a4e:	85 e2       	ldi	r24, 0x25	; 37
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	25 e2       	ldi	r18, 0x25	; 37
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	f9 01       	movw	r30, r18
     a58:	20 81       	ld	r18, Z
     a5a:	42 2f       	mov	r20, r18
     a5c:	4f 70       	andi	r20, 0x0F	; 15
     a5e:	9e 01       	movw	r18, r28
     a60:	21 59       	subi	r18, 0x91	; 145
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	f9 01       	movw	r30, r18
     a66:	20 81       	ld	r18, Z
     a68:	20 7f       	andi	r18, 0xF0	; 240
     a6a:	24 2b       	or	r18, r20
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
     a70:	85 e2       	ldi	r24, 0x25	; 37
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	25 e2       	ldi	r18, 0x25	; 37
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	f9 01       	movw	r30, r18
     a7a:	20 81       	ld	r18, Z
     a7c:	21 60       	ori	r18, 0x01	; 1
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
     a82:	85 e2       	ldi	r24, 0x25	; 37
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	25 e2       	ldi	r18, 0x25	; 37
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	f9 01       	movw	r30, r18
     a8c:	20 81       	ld	r18, Z
     a8e:	22 60       	ori	r18, 0x02	; 2
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e8       	ldi	r26, 0x80	; 128
     a9a:	bf e3       	ldi	r27, 0x3F	; 63
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	9a 83       	std	Y+2, r25	; 0x02
     aa0:	ab 83       	std	Y+3, r26	; 0x03
     aa2:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     aa4:	8e 01       	movw	r16, r28
     aa6:	0d 5a       	subi	r16, 0xAD	; 173
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	2b ea       	ldi	r18, 0xAB	; 171
     aac:	3a ea       	ldi	r19, 0xAA	; 170
     aae:	4a e2       	ldi	r20, 0x2A	; 42
     ab0:	50 e4       	ldi	r21, 0x40	; 64
     ab2:	69 81       	ldd	r22, Y+1	; 0x01
     ab4:	7a 81       	ldd	r23, Y+2	; 0x02
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	f8 01       	movw	r30, r16
     ac4:	80 83       	st	Z, r24
     ac6:	91 83       	std	Z+1, r25	; 0x01
     ac8:	a2 83       	std	Z+2, r26	; 0x02
     aca:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     acc:	8e 01       	movw	r16, r28
     ace:	09 5a       	subi	r16, 0xA9	; 169
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	ab 81       	ldd	r26, Y+3	; 0x03
     ad8:	bc 81       	ldd	r27, Y+4	; 0x04
     ada:	9c 01       	movw	r18, r24
     adc:	ad 01       	movw	r20, r26
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	f8 01       	movw	r30, r16
     aec:	80 83       	st	Z, r24
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	a2 83       	std	Z+2, r26	; 0x02
     af2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     af4:	ce 01       	movw	r24, r28
     af6:	8d 5a       	subi	r24, 0xAD	; 173
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f e3       	ldi	r21, 0x3F	; 63
     b02:	fc 01       	movw	r30, r24
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	3c f4       	brge	.+14     	; 0xb22 <lcddata+0xf8>
		__ticks = 1;
     b14:	ce 01       	movw	r24, r28
     b16:	85 5a       	subi	r24, 0xA5	; 165
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	fc 01       	movw	r30, r24
     b1e:	20 83       	st	Z, r18
     b20:	2c c1       	rjmp	.+600    	; 0xd7a <lcddata+0x350>
	else if (__tmp2 > 65535)
     b22:	ce 01       	movw	r24, r28
     b24:	89 5a       	subi	r24, 0xA9	; 169
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	3f ef       	ldi	r19, 0xFF	; 255
     b2c:	4f e7       	ldi	r20, 0x7F	; 127
     b2e:	57 e4       	ldi	r21, 0x47	; 71
     b30:	fc 01       	movw	r30, r24
     b32:	60 81       	ld	r22, Z
     b34:	71 81       	ldd	r23, Z+1	; 0x01
     b36:	82 81       	ldd	r24, Z+2	; 0x02
     b38:	93 81       	ldd	r25, Z+3	; 0x03
     b3a:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     b3e:	18 16       	cp	r1, r24
     b40:	0c f0       	brlt	.+2      	; 0xb44 <lcddata+0x11a>
     b42:	cd c0       	rjmp	.+410    	; 0xcde <lcddata+0x2b4>
	{
		_delay_ms(__us / 1000.0);
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	4a e7       	ldi	r20, 0x7A	; 122
     b4a:	54 e4       	ldi	r21, 0x44	; 68
     b4c:	69 81       	ldd	r22, Y+1	; 0x01
     b4e:	7a 81       	ldd	r23, Y+2	; 0x02
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	9e 01       	movw	r18, r28
     b5e:	24 5a       	subi	r18, 0xA4	; 164
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	f9 01       	movw	r30, r18
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	8e 01       	movw	r16, r28
     b6e:	00 5a       	subi	r16, 0xA0	; 160
     b70:	1f 4f       	sbci	r17, 0xFF	; 255
     b72:	ce 01       	movw	r24, r28
     b74:	84 5a       	subi	r24, 0xA4	; 164
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a ef       	ldi	r20, 0xFA	; 250
     b7e:	54 e4       	ldi	r21, 0x44	; 68
     b80:	fc 01       	movw	r30, r24
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	a2 83       	std	Z+2, r26	; 0x02
     b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	80 5a       	subi	r24, 0xA0	; 160
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	fc 01       	movw	r30, r24
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     bb8:	88 23       	and	r24, r24
     bba:	4c f4       	brge	.+18     	; 0xbce <lcddata+0x1a4>
		__ticks = 1;
     bbc:	ce 01       	movw	r24, r28
     bbe:	8c 59       	subi	r24, 0x9C	; 156
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	31 83       	std	Z+1, r19	; 0x01
     bca:	20 83       	st	Z, r18
     bcc:	6d c0       	rjmp	.+218    	; 0xca8 <lcddata+0x27e>
	else if (__tmp > 65535)
     bce:	ce 01       	movw	r24, r28
     bd0:	80 5a       	subi	r24, 0xA0	; 160
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	fc 01       	movw	r30, r24
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     bea:	18 16       	cp	r1, r24
     bec:	0c f0       	brlt	.+2      	; 0xbf0 <lcddata+0x1c6>
     bee:	4a c0       	rjmp	.+148    	; 0xc84 <lcddata+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	ce 01       	movw	r24, r28
     bf2:	84 5a       	subi	r24, 0xA4	; 164
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e2       	ldi	r20, 0x20	; 32
     bfc:	51 e4       	ldi	r21, 0x41	; 65
     bfe:	fc 01       	movw	r30, r24
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	8e 01       	movw	r16, r28
     c12:	0c 59       	subi	r16, 0x9C	; 156
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	bc 01       	movw	r22, r24
     c18:	cd 01       	movw	r24, r26
     c1a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	f8 01       	movw	r30, r16
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	80 83       	st	Z, r24
     c28:	24 c0       	rjmp	.+72     	; 0xc72 <lcddata+0x248>
     c2a:	ce 01       	movw	r24, r28
     c2c:	8a 59       	subi	r24, 0x9A	; 154
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	28 ec       	ldi	r18, 0xC8	; 200
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	fc 01       	movw	r30, r24
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	20 83       	st	Z, r18
     c3a:	ce 01       	movw	r24, r28
     c3c:	8a 59       	subi	r24, 0x9A	; 154
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <lcddata+0x21c>
     c4a:	9e 01       	movw	r18, r28
     c4c:	2a 59       	subi	r18, 0x9A	; 154
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	f9 01       	movw	r30, r18
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c56:	ce 01       	movw	r24, r28
     c58:	8c 59       	subi	r24, 0x9C	; 156
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	9e 01       	movw	r18, r28
     c5e:	2c 59       	subi	r18, 0x9C	; 156
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	31 81       	ldd	r19, Z+1	; 0x01
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	31 09       	sbc	r19, r1
     c6c:	fc 01       	movw	r30, r24
     c6e:	31 83       	std	Z+1, r19	; 0x01
     c70:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	ce 01       	movw	r24, r28
     c74:	8c 59       	subi	r24, 0x9C	; 156
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	fc 01       	movw	r30, r24
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	89 2b       	or	r24, r25
     c80:	a1 f6       	brne	.-88     	; 0xc2a <lcddata+0x200>
     c82:	7b c0       	rjmp	.+246    	; 0xd7a <lcddata+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c84:	8e 01       	movw	r16, r28
     c86:	0c 59       	subi	r16, 0x9C	; 156
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	ce 01       	movw	r24, r28
     c8c:	80 5a       	subi	r24, 0xA0	; 160
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	fc 01       	movw	r30, r24
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	f8 01       	movw	r30, r16
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	ce 01       	movw	r24, r28
     caa:	88 59       	subi	r24, 0x98	; 152
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	9e 01       	movw	r18, r28
     cb0:	2c 59       	subi	r18, 0x9C	; 156
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	f9 01       	movw	r30, r18
     cb6:	20 81       	ld	r18, Z
     cb8:	31 81       	ldd	r19, Z+1	; 0x01
     cba:	fc 01       	movw	r30, r24
     cbc:	31 83       	std	Z+1, r19	; 0x01
     cbe:	20 83       	st	Z, r18
     cc0:	ce 01       	movw	r24, r28
     cc2:	88 59       	subi	r24, 0x98	; 152
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <lcddata+0x2a2>
     cd0:	9e 01       	movw	r18, r28
     cd2:	28 59       	subi	r18, 0x98	; 152
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	f9 01       	movw	r30, r18
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	80 83       	st	Z, r24
     cdc:	4e c0       	rjmp	.+156    	; 0xd7a <lcddata+0x350>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cde:	ce 01       	movw	r24, r28
     ce0:	8d 5a       	subi	r24, 0xAD	; 173
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4f e7       	ldi	r20, 0x7F	; 127
     cea:	53 e4       	ldi	r21, 0x43	; 67
     cec:	fc 01       	movw	r30, r24
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	6c f5       	brge	.+90     	; 0xd58 <lcddata+0x32e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     cfe:	8e 01       	movw	r16, r28
     d00:	06 59       	subi	r16, 0x96	; 150
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	ce 01       	movw	r24, r28
     d06:	89 5a       	subi	r24, 0xA9	; 169
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	fc 01       	movw	r30, r24
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	f8 01       	movw	r30, r16
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
     d22:	ce 01       	movw	r24, r28
     d24:	84 59       	subi	r24, 0x94	; 148
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	9e 01       	movw	r18, r28
     d2a:	26 59       	subi	r18, 0x96	; 150
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	f9 01       	movw	r30, r18
     d30:	20 81       	ld	r18, Z
     d32:	31 81       	ldd	r19, Z+1	; 0x01
     d34:	fc 01       	movw	r30, r24
     d36:	31 83       	std	Z+1, r19	; 0x01
     d38:	20 83       	st	Z, r18
     d3a:	ce 01       	movw	r24, r28
     d3c:	84 59       	subi	r24, 0x94	; 148
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <lcddata+0x31c>
     d4a:	9e 01       	movw	r18, r28
     d4c:	24 59       	subi	r18, 0x94	; 148
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	f9 01       	movw	r30, r18
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
     d56:	28 c0       	rjmp	.+80     	; 0xda8 <lcddata+0x37e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d58:	8e 01       	movw	r16, r28
     d5a:	05 5a       	subi	r16, 0xA5	; 165
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	ce 01       	movw	r24, r28
     d60:	8d 5a       	subi	r24, 0xAD	; 173
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	fc 01       	movw	r30, r24
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	f8 01       	movw	r30, r16
     d78:	80 83       	st	Z, r24
     d7a:	ce 01       	movw	r24, r28
     d7c:	82 59       	subi	r24, 0x92	; 146
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	9e 01       	movw	r18, r28
     d82:	25 5a       	subi	r18, 0xA5	; 165
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d8e:	ce 01       	movw	r24, r28
     d90:	82 59       	subi	r24, 0x92	; 146
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	28 2f       	mov	r18, r24
     d9a:	2a 95       	dec	r18
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <lcddata+0x370>
     d9e:	ce 01       	movw	r24, r28
     da0:	82 59       	subi	r24, 0x92	; 146
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     da8:	85 e2       	ldi	r24, 0x25	; 37
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	25 e2       	ldi	r18, 0x25	; 37
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	f9 01       	movw	r30, r18
     db2:	20 81       	ld	r18, Z
     db4:	2d 7f       	andi	r18, 0xFD	; 253
     db6:	fc 01       	movw	r30, r24
     db8:	20 83       	st	Z, r18
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a8 ec       	ldi	r26, 0xC8	; 200
     dc0:	b2 e4       	ldi	r27, 0x42	; 66
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	af 83       	std	Y+7, r26	; 0x07
     dc8:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     dca:	2b ea       	ldi	r18, 0xAB	; 171
     dcc:	3a ea       	ldi	r19, 0xAA	; 170
     dce:	4a e2       	ldi	r20, 0x2A	; 42
     dd0:	50 e4       	ldi	r21, 0x40	; 64
     dd2:	6d 81       	ldd	r22, Y+5	; 0x05
     dd4:	7e 81       	ldd	r23, Y+6	; 0x06
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	8f ab       	std	Y+55, r24	; 0x37
     de4:	98 af       	std	Y+56, r25	; 0x38
     de6:	a9 af       	std	Y+57, r26	; 0x39
     de8:	ba af       	std	Y+58, r27	; 0x3a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	af 81       	ldd	r26, Y+7	; 0x07
     df0:	b8 85       	ldd	r27, Y+8	; 0x08
     df2:	9c 01       	movw	r18, r24
     df4:	ad 01       	movw	r20, r26
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8b af       	std	Y+59, r24	; 0x3b
     e04:	9c af       	std	Y+60, r25	; 0x3c
     e06:	ad af       	std	Y+61, r26	; 0x3d
     e08:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	6f a9       	ldd	r22, Y+55	; 0x37
     e14:	78 ad       	ldd	r23, Y+56	; 0x38
     e16:	89 ad       	ldd	r24, Y+57	; 0x39
     e18:	9a ad       	ldd	r25, Y+58	; 0x3a
     e1a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     e1e:	88 23       	and	r24, r24
     e20:	1c f4       	brge	.+6      	; 0xe28 <lcddata+0x3fe>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	8f af       	std	Y+63, r24	; 0x3f
     e26:	18 c1       	rjmp	.+560    	; 0x1058 <lcddata+0x62e>
	else if (__tmp2 > 65535)
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	3f ef       	ldi	r19, 0xFF	; 255
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	57 e4       	ldi	r21, 0x47	; 71
     e30:	6b ad       	ldd	r22, Y+59	; 0x3b
     e32:	7c ad       	ldd	r23, Y+60	; 0x3c
     e34:	8d ad       	ldd	r24, Y+61	; 0x3d
     e36:	9e ad       	ldd	r25, Y+62	; 0x3e
     e38:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	0c f0       	brlt	.+2      	; 0xe42 <lcddata+0x418>
     e40:	cd c0       	rjmp	.+410    	; 0xfdc <lcddata+0x5b2>
	{
		_delay_ms(__us / 1000.0);
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	4a e7       	ldi	r20, 0x7A	; 122
     e48:	54 e4       	ldi	r21, 0x44	; 68
     e4a:	6d 81       	ldd	r22, Y+5	; 0x05
     e4c:	7e 81       	ldd	r23, Y+6	; 0x06
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9e 01       	movw	r18, r28
     e5c:	20 5c       	subi	r18, 0xC0	; 192
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	f9 01       	movw	r30, r18
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e6a:	8e 01       	movw	r16, r28
     e6c:	0c 5b       	subi	r16, 0xBC	; 188
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	ce 01       	movw	r24, r28
     e72:	80 5c       	subi	r24, 0xC0	; 192
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4a ef       	ldi	r20, 0xFA	; 250
     e7c:	54 e4       	ldi	r21, 0x44	; 68
     e7e:	fc 01       	movw	r30, r24
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	f8 01       	movw	r30, r16
     e92:	80 83       	st	Z, r24
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	a2 83       	std	Z+2, r26	; 0x02
     e98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e9a:	ce 01       	movw	r24, r28
     e9c:	8c 5b       	subi	r24, 0xBC	; 188
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	fc 01       	movw	r30, r24
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
     eb6:	88 23       	and	r24, r24
     eb8:	4c f4       	brge	.+18     	; 0xecc <lcddata+0x4a2>
		__ticks = 1;
     eba:	ce 01       	movw	r24, r28
     ebc:	88 5b       	subi	r24, 0xB8	; 184
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	fc 01       	movw	r30, r24
     ec6:	31 83       	std	Z+1, r19	; 0x01
     ec8:	20 83       	st	Z, r18
     eca:	6d c0       	rjmp	.+218    	; 0xfa6 <lcddata+0x57c>
	else if (__tmp > 65535)
     ecc:	ce 01       	movw	r24, r28
     ece:	8c 5b       	subi	r24, 0xBC	; 188
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	fc 01       	movw	r30, r24
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     ee8:	18 16       	cp	r1, r24
     eea:	0c f0       	brlt	.+2      	; 0xeee <lcddata+0x4c4>
     eec:	4a c0       	rjmp	.+148    	; 0xf82 <lcddata+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eee:	ce 01       	movw	r24, r28
     ef0:	80 5c       	subi	r24, 0xC0	; 192
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	fc 01       	movw	r30, r24
     efe:	60 81       	ld	r22, Z
     f00:	71 81       	ldd	r23, Z+1	; 0x01
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8e 01       	movw	r16, r28
     f10:	08 5b       	subi	r16, 0xB8	; 184
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	f8 01       	movw	r30, r16
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	24 c0       	rjmp	.+72     	; 0xf70 <lcddata+0x546>
     f28:	ce 01       	movw	r24, r28
     f2a:	86 5b       	subi	r24, 0xB6	; 182
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	28 ec       	ldi	r18, 0xC8	; 200
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	fc 01       	movw	r30, r24
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f38:	ce 01       	movw	r24, r28
     f3a:	86 5b       	subi	r24, 0xB6	; 182
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	fc 01       	movw	r30, r24
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <lcddata+0x51a>
     f48:	9e 01       	movw	r18, r28
     f4a:	26 5b       	subi	r18, 0xB6	; 182
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	f9 01       	movw	r30, r18
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	ce 01       	movw	r24, r28
     f56:	88 5b       	subi	r24, 0xB8	; 184
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	9e 01       	movw	r18, r28
     f5c:	28 5b       	subi	r18, 0xB8	; 184
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	31 81       	ldd	r19, Z+1	; 0x01
     f66:	21 50       	subi	r18, 0x01	; 1
     f68:	31 09       	sbc	r19, r1
     f6a:	fc 01       	movw	r30, r24
     f6c:	31 83       	std	Z+1, r19	; 0x01
     f6e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	ce 01       	movw	r24, r28
     f72:	88 5b       	subi	r24, 0xB8	; 184
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	fc 01       	movw	r30, r24
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	89 2b       	or	r24, r25
     f7e:	a1 f6       	brne	.-88     	; 0xf28 <lcddata+0x4fe>
     f80:	6b c0       	rjmp	.+214    	; 0x1058 <lcddata+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f82:	8e 01       	movw	r16, r28
     f84:	08 5b       	subi	r16, 0xB8	; 184
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	ce 01       	movw	r24, r28
     f8a:	8c 5b       	subi	r24, 0xBC	; 188
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	fc 01       	movw	r30, r24
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	f8 01       	movw	r30, r16
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
     fa6:	ce 01       	movw	r24, r28
     fa8:	84 5b       	subi	r24, 0xB4	; 180
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	9e 01       	movw	r18, r28
     fae:	28 5b       	subi	r18, 0xB8	; 184
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	31 81       	ldd	r19, Z+1	; 0x01
     fb8:	fc 01       	movw	r30, r24
     fba:	31 83       	std	Z+1, r19	; 0x01
     fbc:	20 83       	st	Z, r18
     fbe:	ce 01       	movw	r24, r28
     fc0:	84 5b       	subi	r24, 0xB4	; 180
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <lcddata+0x5a0>
     fce:	9e 01       	movw	r18, r28
     fd0:	24 5b       	subi	r18, 0xB4	; 180
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	f9 01       	movw	r30, r18
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
     fda:	3e c0       	rjmp	.+124    	; 0x1058 <lcddata+0x62e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4f e7       	ldi	r20, 0x7F	; 127
     fe2:	53 e4       	ldi	r21, 0x43	; 67
     fe4:	6f a9       	ldd	r22, Y+55	; 0x37
     fe6:	78 ad       	ldd	r23, Y+56	; 0x38
     fe8:	89 ad       	ldd	r24, Y+57	; 0x39
     fea:	9a ad       	ldd	r25, Y+58	; 0x3a
     fec:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
     ff0:	18 16       	cp	r1, r24
     ff2:	4c f5       	brge	.+82     	; 0x1046 <lcddata+0x61c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ff4:	8e 01       	movw	r16, r28
     ff6:	02 5b       	subi	r16, 0xB2	; 178
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	6b ad       	ldd	r22, Y+59	; 0x3b
     ffc:	7c ad       	ldd	r23, Y+60	; 0x3c
     ffe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1000:	9e ad       	ldd	r25, Y+62	; 0x3e
    1002:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	f8 01       	movw	r30, r16
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
    1010:	ce 01       	movw	r24, r28
    1012:	80 5b       	subi	r24, 0xB0	; 176
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	9e 01       	movw	r18, r28
    1018:	22 5b       	subi	r18, 0xB2	; 178
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	f9 01       	movw	r30, r18
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	fc 01       	movw	r30, r24
    1024:	31 83       	std	Z+1, r19	; 0x01
    1026:	20 83       	st	Z, r18
    1028:	ce 01       	movw	r24, r28
    102a:	80 5b       	subi	r24, 0xB0	; 176
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	fc 01       	movw	r30, r24
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <lcddata+0x60a>
    1038:	9e 01       	movw	r18, r28
    103a:	20 5b       	subi	r18, 0xB0	; 176
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	f9 01       	movw	r30, r18
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
    1044:	1c c0       	rjmp	.+56     	; 0x107e <lcddata+0x654>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1046:	6f a9       	ldd	r22, Y+55	; 0x37
    1048:	78 ad       	ldd	r23, Y+56	; 0x38
    104a:	89 ad       	ldd	r24, Y+57	; 0x39
    104c:	9a ad       	ldd	r25, Y+58	; 0x3a
    104e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8f af       	std	Y+63, r24	; 0x3f
    1058:	ce 01       	movw	r24, r28
    105a:	8e 5a       	subi	r24, 0xAE	; 174
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1060:	fc 01       	movw	r30, r24
    1062:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1064:	ce 01       	movw	r24, r28
    1066:	8e 5a       	subi	r24, 0xAE	; 174
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	fc 01       	movw	r30, r24
    106c:	80 81       	ld	r24, Z
    106e:	28 2f       	mov	r18, r24
    1070:	2a 95       	dec	r18
    1072:	f1 f7       	brne	.-4      	; 0x1070 <lcddata+0x646>
    1074:	ce 01       	movw	r24, r28
    1076:	8e 5a       	subi	r24, 0xAE	; 174
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
    107e:	85 e2       	ldi	r24, 0x25	; 37
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	25 e2       	ldi	r18, 0x25	; 37
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	42 2f       	mov	r20, r18
    108c:	4f 70       	andi	r20, 0x0F	; 15
    108e:	9e 01       	movw	r18, r28
    1090:	21 59       	subi	r18, 0x91	; 145
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	f9 01       	movw	r30, r18
    1096:	20 81       	ld	r18, Z
    1098:	22 2f       	mov	r18, r18
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	22 95       	swap	r18
    109e:	32 95       	swap	r19
    10a0:	30 7f       	andi	r19, 0xF0	; 240
    10a2:	32 27       	eor	r19, r18
    10a4:	20 7f       	andi	r18, 0xF0	; 240
    10a6:	32 27       	eor	r19, r18
    10a8:	24 2b       	or	r18, r20
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
    10ae:	85 e2       	ldi	r24, 0x25	; 37
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	25 e2       	ldi	r18, 0x25	; 37
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	f9 01       	movw	r30, r18
    10b8:	20 81       	ld	r18, Z
    10ba:	22 60       	ori	r18, 0x02	; 2
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 e8       	ldi	r26, 0x80	; 128
    10c6:	bf e3       	ldi	r27, 0x3F	; 63
    10c8:	89 87       	std	Y+9, r24	; 0x09
    10ca:	9a 87       	std	Y+10, r25	; 0x0a
    10cc:	ab 87       	std	Y+11, r26	; 0x0b
    10ce:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    10d0:	2b ea       	ldi	r18, 0xAB	; 171
    10d2:	3a ea       	ldi	r19, 0xAA	; 170
    10d4:	4a e2       	ldi	r20, 0x2A	; 42
    10d6:	50 e4       	ldi	r21, 0x40	; 64
    10d8:	69 85       	ldd	r22, Y+9	; 0x09
    10da:	7a 85       	ldd	r23, Y+10	; 0x0a
    10dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    10de:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e0:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8b 8f       	std	Y+27, r24	; 0x1b
    10ea:	9c 8f       	std	Y+28, r25	; 0x1c
    10ec:	ad 8f       	std	Y+29, r26	; 0x1d
    10ee:	be 8f       	std	Y+30, r27	; 0x1e
	__tmp2 = ((F_CPU) / 4e6) * __us;
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    10f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    10f8:	9c 01       	movw	r18, r24
    10fa:	ad 01       	movw	r20, r26
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8f 8f       	std	Y+31, r24	; 0x1f
    110a:	98 a3       	std	Y+32, r25	; 0x20
    110c:	a9 a3       	std	Y+33, r26	; 0x21
    110e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	5f e3       	ldi	r21, 0x3F	; 63
    1118:	6b 8d       	ldd	r22, Y+27	; 0x1b
    111a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    111c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    111e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1120:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    1124:	88 23       	and	r24, r24
    1126:	1c f4       	brge	.+6      	; 0x112e <lcddata+0x704>
		__ticks = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	8b a3       	std	Y+35, r24	; 0x23
    112c:	b2 c0       	rjmp	.+356    	; 0x1292 <lcddata+0x868>
	else if (__tmp2 > 65535)
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1138:	78 a1       	ldd	r23, Y+32	; 0x20
    113a:	89 a1       	ldd	r24, Y+33	; 0x21
    113c:	9a a1       	ldd	r25, Y+34	; 0x22
    113e:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1142:	18 16       	cp	r1, r24
    1144:	0c f0       	brlt	.+2      	; 0x1148 <lcddata+0x71e>
    1146:	7b c0       	rjmp	.+246    	; 0x123e <lcddata+0x814>
	{
		_delay_ms(__us / 1000.0);
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a e7       	ldi	r20, 0x7A	; 122
    114e:	54 e4       	ldi	r21, 0x44	; 68
    1150:	69 85       	ldd	r22, Y+9	; 0x09
    1152:	7a 85       	ldd	r23, Y+10	; 0x0a
    1154:	8b 85       	ldd	r24, Y+11	; 0x0b
    1156:	9c 85       	ldd	r25, Y+12	; 0x0c
    1158:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8c a3       	std	Y+36, r24	; 0x24
    1162:	9d a3       	std	Y+37, r25	; 0x25
    1164:	ae a3       	std	Y+38, r26	; 0x26
    1166:	bf a3       	std	Y+39, r27	; 0x27

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	4a ef       	ldi	r20, 0xFA	; 250
    116e:	54 e4       	ldi	r21, 0x44	; 68
    1170:	6c a1       	ldd	r22, Y+36	; 0x24
    1172:	7d a1       	ldd	r23, Y+37	; 0x25
    1174:	8e a1       	ldd	r24, Y+38	; 0x26
    1176:	9f a1       	ldd	r25, Y+39	; 0x27
    1178:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	88 a7       	std	Y+40, r24	; 0x28
    1182:	99 a7       	std	Y+41, r25	; 0x29
    1184:	aa a7       	std	Y+42, r26	; 0x2a
    1186:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	5f e3       	ldi	r21, 0x3F	; 63
    1190:	68 a5       	ldd	r22, Y+40	; 0x28
    1192:	79 a5       	ldd	r23, Y+41	; 0x29
    1194:	8a a5       	ldd	r24, Y+42	; 0x2a
    1196:	9b a5       	ldd	r25, Y+43	; 0x2b
    1198:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <lcddata+0x780>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9d a7       	std	Y+45, r25	; 0x2d
    11a6:	8c a7       	std	Y+44, r24	; 0x2c
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <lcddata+0x7fe>
	else if (__tmp > 65535)
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	4f e7       	ldi	r20, 0x7F	; 127
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	68 a5       	ldd	r22, Y+40	; 0x28
    11b4:	79 a5       	ldd	r23, Y+41	; 0x29
    11b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    11b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    11ba:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <lcddata+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e2       	ldi	r20, 0x20	; 32
    11c8:	51 e4       	ldi	r21, 0x41	; 65
    11ca:	6c a1       	ldd	r22, Y+36	; 0x24
    11cc:	7d a1       	ldd	r23, Y+37	; 0x25
    11ce:	8e a1       	ldd	r24, Y+38	; 0x26
    11d0:	9f a1       	ldd	r25, Y+39	; 0x27
    11d2:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9d a7       	std	Y+45, r25	; 0x2d
    11e8:	8c a7       	std	Y+44, r24	; 0x2c
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <lcddata+0x7e0>
    11ec:	88 ec       	ldi	r24, 0xC8	; 200
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9f a7       	std	Y+47, r25	; 0x2f
    11f2:	8e a7       	std	Y+46, r24	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11f4:	8e a5       	ldd	r24, Y+46	; 0x2e
    11f6:	9f a5       	ldd	r25, Y+47	; 0x2f
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <lcddata+0x7ce>
    11fc:	9f a7       	std	Y+47, r25	; 0x2f
    11fe:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	8c a5       	ldd	r24, Y+44	; 0x2c
    1202:	9d a5       	ldd	r25, Y+45	; 0x2d
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9d a7       	std	Y+45, r25	; 0x2d
    1208:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	8c a5       	ldd	r24, Y+44	; 0x2c
    120c:	9d a5       	ldd	r25, Y+45	; 0x2d
    120e:	89 2b       	or	r24, r25
    1210:	69 f7       	brne	.-38     	; 0x11ec <lcddata+0x7c2>
    1212:	3f c0       	rjmp	.+126    	; 0x1292 <lcddata+0x868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	68 a5       	ldd	r22, Y+40	; 0x28
    1216:	79 a5       	ldd	r23, Y+41	; 0x29
    1218:	8a a5       	ldd	r24, Y+42	; 0x2a
    121a:	9b a5       	ldd	r25, Y+43	; 0x2b
    121c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9d a7       	std	Y+45, r25	; 0x2d
    1226:	8c a7       	std	Y+44, r24	; 0x2c
    1228:	8c a5       	ldd	r24, Y+44	; 0x2c
    122a:	9d a5       	ldd	r25, Y+45	; 0x2d
    122c:	99 ab       	std	Y+49, r25	; 0x31
    122e:	88 ab       	std	Y+48, r24	; 0x30
    1230:	88 a9       	ldd	r24, Y+48	; 0x30
    1232:	99 a9       	ldd	r25, Y+49	; 0x31
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <lcddata+0x80a>
    1238:	99 ab       	std	Y+49, r25	; 0x31
    123a:	88 ab       	std	Y+48, r24	; 0x30
    123c:	2a c0       	rjmp	.+84     	; 0x1292 <lcddata+0x868>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	53 e4       	ldi	r21, 0x43	; 67
    1246:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1248:	7c 8d       	ldd	r23, Y+28	; 0x1c
    124a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    124e:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1252:	18 16       	cp	r1, r24
    1254:	ac f4       	brge	.+42     	; 0x1280 <lcddata+0x856>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1256:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1258:	78 a1       	ldd	r23, Y+32	; 0x20
    125a:	89 a1       	ldd	r24, Y+33	; 0x21
    125c:	9a a1       	ldd	r25, Y+34	; 0x22
    125e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9b ab       	std	Y+51, r25	; 0x33
    1268:	8a ab       	std	Y+50, r24	; 0x32
    126a:	8a a9       	ldd	r24, Y+50	; 0x32
    126c:	9b a9       	ldd	r25, Y+51	; 0x33
    126e:	9d ab       	std	Y+53, r25	; 0x35
    1270:	8c ab       	std	Y+52, r24	; 0x34
    1272:	8c a9       	ldd	r24, Y+52	; 0x34
    1274:	9d a9       	ldd	r25, Y+53	; 0x35
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <lcddata+0x84c>
    127a:	9d ab       	std	Y+53, r25	; 0x35
    127c:	8c ab       	std	Y+52, r24	; 0x34
    127e:	0f c0       	rjmp	.+30     	; 0x129e <lcddata+0x874>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1280:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1282:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1284:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1286:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1288:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8b a3       	std	Y+35, r24	; 0x23
    1292:	8b a1       	ldd	r24, Y+35	; 0x23
    1294:	8e ab       	std	Y+54, r24	; 0x36
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1296:	8e a9       	ldd	r24, Y+54	; 0x36
    1298:	8a 95       	dec	r24
    129a:	f1 f7       	brne	.-4      	; 0x1298 <lcddata+0x86e>
    129c:	8e ab       	std	Y+54, r24	; 0x36
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
    129e:	85 e2       	ldi	r24, 0x25	; 37
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	25 e2       	ldi	r18, 0x25	; 37
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	f9 01       	movw	r30, r18
    12a8:	20 81       	ld	r18, Z
    12aa:	2d 7f       	andi	r18, 0xFD	; 253
    12ac:	fc 01       	movw	r30, r24
    12ae:	20 83       	st	Z, r18
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a0 e0       	ldi	r26, 0x00	; 0
    12b6:	b0 e4       	ldi	r27, 0x40	; 64
    12b8:	8d 87       	std	Y+13, r24	; 0x0d
    12ba:	9e 87       	std	Y+14, r25	; 0x0e
    12bc:	af 87       	std	Y+15, r26	; 0x0f
    12be:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	4a ef       	ldi	r20, 0xFA	; 250
    12c6:	54 e4       	ldi	r21, 0x44	; 68
    12c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    12ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    12cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ce:	98 89       	ldd	r25, Y+16	; 0x10
    12d0:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	89 8b       	std	Y+17, r24	; 0x11
    12da:	9a 8b       	std	Y+18, r25	; 0x12
    12dc:	ab 8b       	std	Y+19, r26	; 0x13
    12de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	69 89       	ldd	r22, Y+17	; 0x11
    12ea:	7a 89       	ldd	r23, Y+18	; 0x12
    12ec:	8b 89       	ldd	r24, Y+19	; 0x13
    12ee:	9c 89       	ldd	r25, Y+20	; 0x14
    12f0:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	2c f4       	brge	.+10     	; 0x1302 <lcddata+0x8d8>
		__ticks = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9e 8b       	std	Y+22, r25	; 0x16
    12fe:	8d 8b       	std	Y+21, r24	; 0x15
    1300:	3f c0       	rjmp	.+126    	; 0x1380 <lcddata+0x956>
	else if (__tmp > 65535)
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	57 e4       	ldi	r21, 0x47	; 71
    130a:	69 89       	ldd	r22, Y+17	; 0x11
    130c:	7a 89       	ldd	r23, Y+18	; 0x12
    130e:	8b 89       	ldd	r24, Y+19	; 0x13
    1310:	9c 89       	ldd	r25, Y+20	; 0x14
    1312:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1316:	18 16       	cp	r1, r24
    1318:	4c f5       	brge	.+82     	; 0x136c <lcddata+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e2       	ldi	r20, 0x20	; 32
    1320:	51 e4       	ldi	r21, 0x41	; 65
    1322:	6d 85       	ldd	r22, Y+13	; 0x0d
    1324:	7e 85       	ldd	r23, Y+14	; 0x0e
    1326:	8f 85       	ldd	r24, Y+15	; 0x0f
    1328:	98 89       	ldd	r25, Y+16	; 0x10
    132a:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9e 8b       	std	Y+22, r25	; 0x16
    1340:	8d 8b       	std	Y+21, r24	; 0x15
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <lcddata+0x938>
    1344:	88 ec       	ldi	r24, 0xC8	; 200
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	98 8f       	std	Y+24, r25	; 0x18
    134a:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134c:	8f 89       	ldd	r24, Y+23	; 0x17
    134e:	98 8d       	ldd	r25, Y+24	; 0x18
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <lcddata+0x926>
    1354:	98 8f       	std	Y+24, r25	; 0x18
    1356:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	8d 89       	ldd	r24, Y+21	; 0x15
    135a:	9e 89       	ldd	r25, Y+22	; 0x16
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	9e 8b       	std	Y+22, r25	; 0x16
    1360:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1362:	8d 89       	ldd	r24, Y+21	; 0x15
    1364:	9e 89       	ldd	r25, Y+22	; 0x16
    1366:	89 2b       	or	r24, r25
    1368:	69 f7       	brne	.-38     	; 0x1344 <lcddata+0x91a>
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE*/
}
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <lcddata+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136c:	69 89       	ldd	r22, Y+17	; 0x11
    136e:	7a 89       	ldd	r23, Y+18	; 0x12
    1370:	8b 89       	ldd	r24, Y+19	; 0x13
    1372:	9c 89       	ldd	r25, Y+20	; 0x14
    1374:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9e 8b       	std	Y+22, r25	; 0x16
    137e:	8d 8b       	std	Y+21, r24	; 0x15
    1380:	8d 89       	ldd	r24, Y+21	; 0x15
    1382:	9e 89       	ldd	r25, Y+22	; 0x16
    1384:	9a 8f       	std	Y+26, r25	; 0x1a
    1386:	89 8f       	std	Y+25, r24	; 0x19
    1388:	89 8d       	ldd	r24, Y+25	; 0x19
    138a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <lcddata+0x962>
    1390:	9a 8f       	std	Y+26, r25	; 0x1a
    1392:	89 8f       	std	Y+25, r24	; 0x19
    1394:	00 00       	nop
    1396:	c1 59       	subi	r28, 0x91	; 145
    1398:	df 4f       	sbci	r29, 0xFF	; 255
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	08 95       	ret

000013ae <lcdinit>:

void lcdinit()
{
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	6c 97       	sbiw	r28, 0x1c	; 28
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
	LCD_DDDR = 0xFF;
    13c2:	84 e2       	ldi	r24, 0x24	; 36
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	2f ef       	ldi	r18, 0xFF	; 255
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a8 e4       	ldi	r26, 0x48	; 72
    13d2:	b3 e4       	ldi	r27, 0x43	; 67
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	ab 83       	std	Y+3, r26	; 0x03
    13da:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a ef       	ldi	r20, 0xFA	; 250
    13e2:	54 e4       	ldi	r21, 0x44	; 68
    13e4:	69 81       	ldd	r22, Y+1	; 0x01
    13e6:	7a 81       	ldd	r23, Y+2	; 0x02
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	8b 8b       	std	Y+19, r24	; 0x13
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	ad 8b       	std	Y+21, r26	; 0x15
    13fa:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	6b 89       	ldd	r22, Y+19	; 0x13
    1406:	7c 89       	ldd	r23, Y+20	; 0x14
    1408:	8d 89       	ldd	r24, Y+21	; 0x15
    140a:	9e 89       	ldd	r25, Y+22	; 0x16
    140c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    1410:	88 23       	and	r24, r24
    1412:	2c f4       	brge	.+10     	; 0x141e <lcdinit+0x70>
		__ticks = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	98 8f       	std	Y+24, r25	; 0x18
    141a:	8f 8b       	std	Y+23, r24	; 0x17
    141c:	3f c0       	rjmp	.+126    	; 0x149c <lcdinit+0xee>
	else if (__tmp > 65535)
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	6b 89       	ldd	r22, Y+19	; 0x13
    1428:	7c 89       	ldd	r23, Y+20	; 0x14
    142a:	8d 89       	ldd	r24, Y+21	; 0x15
    142c:	9e 89       	ldd	r25, Y+22	; 0x16
    142e:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1432:	18 16       	cp	r1, r24
    1434:	4c f5       	brge	.+82     	; 0x1488 <lcdinit+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	69 81       	ldd	r22, Y+1	; 0x01
    1440:	7a 81       	ldd	r23, Y+2	; 0x02
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	98 8f       	std	Y+24, r25	; 0x18
    145c:	8f 8b       	std	Y+23, r24	; 0x17
    145e:	0f c0       	rjmp	.+30     	; 0x147e <lcdinit+0xd0>
    1460:	88 ec       	ldi	r24, 0xC8	; 200
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9a 8f       	std	Y+26, r25	; 0x1a
    1466:	89 8f       	std	Y+25, r24	; 0x19
    1468:	89 8d       	ldd	r24, Y+25	; 0x19
    146a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <lcdinit+0xbe>
    1470:	9a 8f       	std	Y+26, r25	; 0x1a
    1472:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	8f 89       	ldd	r24, Y+23	; 0x17
    1476:	98 8d       	ldd	r25, Y+24	; 0x18
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	98 8f       	std	Y+24, r25	; 0x18
    147c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	8f 89       	ldd	r24, Y+23	; 0x17
    1480:	98 8d       	ldd	r25, Y+24	; 0x18
    1482:	89 2b       	or	r24, r25
    1484:	69 f7       	brne	.-38     	; 0x1460 <lcdinit+0xb2>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <lcdinit+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	6b 89       	ldd	r22, Y+19	; 0x13
    148a:	7c 89       	ldd	r23, Y+20	; 0x14
    148c:	8d 89       	ldd	r24, Y+21	; 0x15
    148e:	9e 89       	ldd	r25, Y+22	; 0x16
    1490:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	98 8f       	std	Y+24, r25	; 0x18
    149a:	8f 8b       	std	Y+23, r24	; 0x17
    149c:	8f 89       	ldd	r24, Y+23	; 0x17
    149e:	98 8d       	ldd	r25, Y+24	; 0x18
    14a0:	9c 8f       	std	Y+28, r25	; 0x1c
    14a2:	8b 8f       	std	Y+27, r24	; 0x1b
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <lcdinit+0xfa>
    14ac:	9c 8f       	std	Y+28, r25	; 0x1c
    14ae:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
    14b0:	83 e3       	ldi	r24, 0x33	; 51
    14b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
    14b6:	82 e3       	ldi	r24, 0x32	; 50
    14b8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
    14bc:	88 e2       	ldi	r24, 0x28	; 40
    14be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
    14c2:	8c e0       	ldi	r24, 0x0C	; 12
    14c4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e4       	ldi	r27, 0x40	; 64
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	af 83       	std	Y+7, r26	; 0x07
    14dc:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a ef       	ldi	r20, 0xFA	; 250
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	6d 81       	ldd	r22, Y+5	; 0x05
    14e8:	7e 81       	ldd	r23, Y+6	; 0x06
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	98 85       	ldd	r25, Y+8	; 0x08
    14ee:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	89 87       	std	Y+9, r24	; 0x09
    14f8:	9a 87       	std	Y+10, r25	; 0x0a
    14fa:	ab 87       	std	Y+11, r26	; 0x0b
    14fc:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5f e3       	ldi	r21, 0x3F	; 63
    1506:	69 85       	ldd	r22, Y+9	; 0x09
    1508:	7a 85       	ldd	r23, Y+10	; 0x0a
    150a:	8b 85       	ldd	r24, Y+11	; 0x0b
    150c:	9c 85       	ldd	r25, Y+12	; 0x0c
    150e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <lcdinit+0x172>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 87       	std	Y+14, r25	; 0x0e
    151c:	8d 87       	std	Y+13, r24	; 0x0d
    151e:	3f c0       	rjmp	.+126    	; 0x159e <lcdinit+0x1f0>
	else if (__tmp > 65535)
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	3f ef       	ldi	r19, 0xFF	; 255
    1524:	4f e7       	ldi	r20, 0x7F	; 127
    1526:	57 e4       	ldi	r21, 0x47	; 71
    1528:	69 85       	ldd	r22, Y+9	; 0x09
    152a:	7a 85       	ldd	r23, Y+10	; 0x0a
    152c:	8b 85       	ldd	r24, Y+11	; 0x0b
    152e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1530:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <lcdinit+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	6d 81       	ldd	r22, Y+5	; 0x05
    1542:	7e 81       	ldd	r23, Y+6	; 0x06
    1544:	8f 81       	ldd	r24, Y+7	; 0x07
    1546:	98 85       	ldd	r25, Y+8	; 0x08
    1548:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 87       	std	Y+14, r25	; 0x0e
    155e:	8d 87       	std	Y+13, r24	; 0x0d
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <lcdinit+0x1d2>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	98 8b       	std	Y+16, r25	; 0x10
    1568:	8f 87       	std	Y+15, r24	; 0x0f
    156a:	8f 85       	ldd	r24, Y+15	; 0x0f
    156c:	98 89       	ldd	r25, Y+16	; 0x10
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <lcdinit+0x1c0>
    1572:	98 8b       	std	Y+16, r25	; 0x10
    1574:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9e 87       	std	Y+14, r25	; 0x0e
    157e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8d 85       	ldd	r24, Y+13	; 0x0d
    1582:	9e 85       	ldd	r25, Y+14	; 0x0e
    1584:	89 2b       	or	r24, r25
    1586:	69 f7       	brne	.-38     	; 0x1562 <lcdinit+0x1b4>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <lcdinit+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	69 85       	ldd	r22, Y+9	; 0x09
    158c:	7a 85       	ldd	r23, Y+10	; 0x0a
    158e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1590:	9c 85       	ldd	r25, Y+12	; 0x0c
    1592:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 87       	std	Y+14, r25	; 0x0e
    159c:	8d 87       	std	Y+13, r24	; 0x0d
    159e:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a2:	9a 8b       	std	Y+18, r25	; 0x12
    15a4:	89 8b       	std	Y+17, r24	; 0x11
    15a6:	89 89       	ldd	r24, Y+17	; 0x11
    15a8:	9a 89       	ldd	r25, Y+18	; 0x12
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <lcdinit+0x1fc>
    15ae:	9a 8b       	std	Y+18, r25	; 0x12
    15b0:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(2);
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
    15b2:	82 e8       	ldi	r24, 0x82	; 130
    15b4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
}
    15b8:	00 00       	nop
    15ba:	6c 96       	adiw	r28, 0x1c	; 28
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y)
{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <lcd_gotoxy+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <lcd_gotoxy+0x8>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char firstcharadd[]={0x80, 0xC0};
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	80 ec       	ldi	r24, 0xC0	; 192
    15e2:	8a 83       	std	Y+2, r24	; 0x02
	lcdcommand(firstcharadd[y] + x);
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9e 01       	movw	r18, r28
    15ec:	2f 5f       	subi	r18, 0xFF	; 255
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
    15f0:	82 0f       	add	r24, r18
    15f2:	93 1f       	adc	r25, r19
    15f4:	fc 01       	movw	r30, r24
    15f6:	90 81       	ld	r25, Z
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	89 0f       	add	r24, r25
    15fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
}
    1600:	00 00       	nop
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <lcd_print>:

void lcd_print(char *str)
{
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	00 d0       	rcall	.+0      	; 0x1616 <lcd_print+0x6>
    1616:	1f 92       	push	r1
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9b 83       	std	Y+3, r25	; 0x03
    161e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
    1620:	19 82       	std	Y+1, r1	; 0x01
	while (str[i] |= 0)
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <lcd_print+0x30>
	{
		lcddata(str[i]);
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2a 81       	ldd	r18, Y+2	; 0x02
    162c:	3b 81       	ldd	r19, Y+3	; 0x03
    162e:	82 0f       	add	r24, r18
    1630:	93 1f       	adc	r25, r19
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	0e 94 15 05 	call	0xa2a	; 0xa2a <lcddata>
		i++;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	8f 5f       	subi	r24, 0xFF	; 255
    163e:	89 83       	std	Y+1, r24	; 0x01
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	2a 81       	ldd	r18, Y+2	; 0x02
    1648:	3b 81       	ldd	r19, Y+3	; 0x03
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	29 81       	ldd	r18, Y+1	; 0x01
    1650:	22 2f       	mov	r18, r18
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a 81       	ldd	r20, Y+2	; 0x02
    1656:	5b 81       	ldd	r21, Y+3	; 0x03
    1658:	24 0f       	add	r18, r20
    165a:	35 1f       	adc	r19, r21
    165c:	f9 01       	movw	r30, r18
    165e:	20 81       	ld	r18, Z
    1660:	fc 01       	movw	r30, r24
    1662:	20 83       	st	Z, r18
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	88 23       	and	r24, r24
    166a:	e1 f6       	brne	.-72     	; 0x1624 <lcd_print+0x14>
	{
		lcddata(str[i]);
		i++;
	}
}
    166c:	00 00       	nop
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <lcd_clear>:

void lcd_clear()
{
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	2e 97       	sbiw	r28, 0x0e	; 14
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
	lcdcommand(0x01);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdcommand>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 e0       	ldi	r26, 0x00	; 0
    169a:	b0 e4       	ldi	r27, 0x40	; 64
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	ab 83       	std	Y+3, r26	; 0x03
    16a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a ef       	ldi	r20, 0xFA	; 250
    16aa:	54 e4       	ldi	r21, 0x44	; 68
    16ac:	69 81       	ldd	r22, Y+1	; 0x01
    16ae:	7a 81       	ldd	r23, Y+2	; 0x02
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	af 83       	std	Y+7, r26	; 0x07
    16c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	6d 81       	ldd	r22, Y+5	; 0x05
    16ce:	7e 81       	ldd	r23, Y+6	; 0x06
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	98 85       	ldd	r25, Y+8	; 0x08
    16d4:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <lcd_clear+0x6c>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9a 87       	std	Y+10, r25	; 0x0a
    16e2:	89 87       	std	Y+9, r24	; 0x09
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <lcd_clear+0xea>
	else if (__tmp > 65535)
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	6d 81       	ldd	r22, Y+5	; 0x05
    16f0:	7e 81       	ldd	r23, Y+6	; 0x06
    16f2:	8f 81       	ldd	r24, Y+7	; 0x07
    16f4:	98 85       	ldd	r25, Y+8	; 0x08
    16f6:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	69 81       	ldd	r22, Y+1	; 0x01
    1708:	7a 81       	ldd	r23, Y+2	; 0x02
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9a 87       	std	Y+10, r25	; 0x0a
    1724:	89 87       	std	Y+9, r24	; 0x09
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <lcd_clear+0xcc>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 87       	std	Y+12, r25	; 0x0c
    172e:	8b 87       	std	Y+11, r24	; 0x0b
    1730:	8b 85       	ldd	r24, Y+11	; 0x0b
    1732:	9c 85       	ldd	r25, Y+12	; 0x0c
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <lcd_clear+0xba>
    1738:	9c 87       	std	Y+12, r25	; 0x0c
    173a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9a 87       	std	Y+10, r25	; 0x0a
    1744:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	89 2b       	or	r24, r25
    174c:	69 f7       	brne	.-38     	; 0x1728 <lcd_clear+0xae>
	_delay_ms(2);
}
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6d 81       	ldd	r22, Y+5	; 0x05
    1752:	7e 81       	ldd	r23, Y+6	; 0x06
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	98 85       	ldd	r25, Y+8	; 0x08
    1758:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9a 87       	std	Y+10, r25	; 0x0a
    1762:	89 87       	std	Y+9, r24	; 0x09
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	9e 87       	std	Y+14, r25	; 0x0e
    176a:	8d 87       	std	Y+13, r24	; 0x0d
    176c:	8d 85       	ldd	r24, Y+13	; 0x0d
    176e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <lcd_clear+0xf6>
    1774:	9e 87       	std	Y+14, r25	; 0x0e
    1776:	8d 87       	std	Y+13, r24	; 0x0d
    1778:	00 00       	nop
    177a:	2e 96       	adiw	r28, 0x0e	; 14
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <Request>:
void Request()						/* Microcontroller send start pulse or request */
{
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	2e 97       	sbiw	r28, 0x0e	; 14
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
	DDRD |= (1<<DHT11_PIN);
    17a0:	8a e2       	ldi	r24, 0x2A	; 42
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	2a e2       	ldi	r18, 0x2A	; 42
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	f9 01       	movw	r30, r18
    17aa:	20 81       	ld	r18, Z
    17ac:	20 64       	ori	r18, 0x40	; 64
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
	PORTD &= ~(1<<DHT11_PIN);		/* set to low pin */
    17b2:	8b e2       	ldi	r24, 0x2B	; 43
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	2b e2       	ldi	r18, 0x2B	; 43
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	2f 7b       	andi	r18, 0xBF	; 191
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 ea       	ldi	r26, 0xA0	; 160
    17ca:	b1 e4       	ldi	r27, 0x41	; 65
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	ab 83       	std	Y+3, r26	; 0x03
    17d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a ef       	ldi	r20, 0xFA	; 250
    17da:	54 e4       	ldi	r21, 0x44	; 68
    17dc:	69 81       	ldd	r22, Y+1	; 0x01
    17de:	7a 81       	ldd	r23, Y+2	; 0x02
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8d 83       	std	Y+5, r24	; 0x05
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	af 83       	std	Y+7, r26	; 0x07
    17f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	6d 81       	ldd	r22, Y+5	; 0x05
    17fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1800:	8f 81       	ldd	r24, Y+7	; 0x07
    1802:	98 85       	ldd	r25, Y+8	; 0x08
    1804:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <Request+0x8a>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9a 87       	std	Y+10, r25	; 0x0a
    1812:	89 87       	std	Y+9, r24	; 0x09
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <Request+0x108>
	else if (__tmp > 65535)
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3f ef       	ldi	r19, 0xFF	; 255
    181a:	4f e7       	ldi	r20, 0x7F	; 127
    181c:	57 e4       	ldi	r21, 0x47	; 71
    181e:	6d 81       	ldd	r22, Y+5	; 0x05
    1820:	7e 81       	ldd	r23, Y+6	; 0x06
    1822:	8f 81       	ldd	r24, Y+7	; 0x07
    1824:	98 85       	ldd	r25, Y+8	; 0x08
    1826:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <Request+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	69 81       	ldd	r22, Y+1	; 0x01
    1838:	7a 81       	ldd	r23, Y+2	; 0x02
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9a 87       	std	Y+10, r25	; 0x0a
    1854:	89 87       	std	Y+9, r24	; 0x09
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <Request+0xea>
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 87       	std	Y+12, r25	; 0x0c
    185e:	8b 87       	std	Y+11, r24	; 0x0b
    1860:	8b 85       	ldd	r24, Y+11	; 0x0b
    1862:	9c 85       	ldd	r25, Y+12	; 0x0c
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <Request+0xd8>
    1868:	9c 87       	std	Y+12, r25	; 0x0c
    186a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9a 87       	std	Y+10, r25	; 0x0a
    1874:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	89 2b       	or	r24, r25
    187c:	69 f7       	brne	.-38     	; 0x1858 <Request+0xcc>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <Request+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6d 81       	ldd	r22, Y+5	; 0x05
    1882:	7e 81       	ldd	r23, Y+6	; 0x06
    1884:	8f 81       	ldd	r24, Y+7	; 0x07
    1886:	98 85       	ldd	r25, Y+8	; 0x08
    1888:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9a 87       	std	Y+10, r25	; 0x0a
    1892:	89 87       	std	Y+9, r24	; 0x09
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	9e 87       	std	Y+14, r25	; 0x0e
    189a:	8d 87       	std	Y+13, r24	; 0x0d
    189c:	8d 85       	ldd	r24, Y+13	; 0x0d
    189e:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <Request+0x114>
    18a4:	9e 87       	std	Y+14, r25	; 0x0e
    18a6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(20);					/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);		/* set to high pin */
    18a8:	8b e2       	ldi	r24, 0x2B	; 43
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	2b e2       	ldi	r18, 0x2B	; 43
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	f9 01       	movw	r30, r18
    18b2:	20 81       	ld	r18, Z
    18b4:	20 64       	ori	r18, 0x40	; 64
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
}
    18ba:	00 00       	nop
    18bc:	2e 96       	adiw	r28, 0x0e	; 14
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <Response>:

void Response()						/* receive response from DHT11 */
{
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<DHT11_PIN);
    18d6:	8a e2       	ldi	r24, 0x2A	; 42
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	2a e2       	ldi	r18, 0x2A	; 42
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	2f 7b       	andi	r18, 0xBF	; 191
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
	while(PIND & (1<<DHT11_PIN));
    18e8:	00 00       	nop
    18ea:	89 e2       	ldi	r24, 0x29	; 41
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	80 74       	andi	r24, 0x40	; 64
    18f8:	99 27       	eor	r25, r25
    18fa:	89 2b       	or	r24, r25
    18fc:	b1 f7       	brne	.-20     	; 0x18ea <Response+0x1c>
	while((PIND & (1<<DHT11_PIN))==0);
    18fe:	00 00       	nop
    1900:	89 e2       	ldi	r24, 0x29	; 41
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	fc 01       	movw	r30, r24
    1906:	80 81       	ld	r24, Z
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	80 74       	andi	r24, 0x40	; 64
    190e:	99 27       	eor	r25, r25
    1910:	89 2b       	or	r24, r25
    1912:	b1 f3       	breq	.-20     	; 0x1900 <Response+0x32>
	while(PIND & (1<<DHT11_PIN));
    1914:	00 00       	nop
    1916:	89 e2       	ldi	r24, 0x29	; 41
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	fc 01       	movw	r30, r24
    191c:	80 81       	ld	r24, Z
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	80 74       	andi	r24, 0x40	; 64
    1924:	99 27       	eor	r25, r25
    1926:	89 2b       	or	r24, r25
    1928:	b1 f7       	brne	.-20     	; 0x1916 <Response+0x48>
}
    192a:	00 00       	nop
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <Receive_data>:

uint8_t Receive_data()							/* receive data */
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	a2 97       	sbiw	r28, 0x22	; 34
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
	for (int q=0; q<8; q++)
    1946:	1a 82       	std	Y+2, r1	; 0x02
    1948:	19 82       	std	Y+1, r1	; 0x01
    194a:	23 c1       	rjmp	.+582    	; 0x1b92 <Receive_data+0x260>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);	/* check received bit 0 or 1 */
    194c:	00 00       	nop
    194e:	89 e2       	ldi	r24, 0x29	; 41
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	80 74       	andi	r24, 0x40	; 64
    195c:	99 27       	eor	r25, r25
    195e:	89 2b       	or	r24, r25
    1960:	b1 f3       	breq	.-20     	; 0x194e <Receive_data+0x1c>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 ef       	ldi	r26, 0xF0	; 240
    1968:	b1 e4       	ldi	r27, 0x41	; 65
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	ad 83       	std	Y+5, r26	; 0x05
    1970:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1972:	2b ea       	ldi	r18, 0xAB	; 171
    1974:	3a ea       	ldi	r19, 0xAA	; 170
    1976:	4a e2       	ldi	r20, 0x2A	; 42
    1978:	50 e4       	ldi	r21, 0x40	; 64
    197a:	6b 81       	ldd	r22, Y+3	; 0x03
    197c:	7c 81       	ldd	r23, Y+4	; 0x04
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8f 83       	std	Y+7, r24	; 0x07
    198c:	98 87       	std	Y+8, r25	; 0x08
    198e:	a9 87       	std	Y+9, r26	; 0x09
    1990:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	ad 81       	ldd	r26, Y+5	; 0x05
    1998:	be 81       	ldd	r27, Y+6	; 0x06
    199a:	9c 01       	movw	r18, r24
    199c:	ad 01       	movw	r20, r26
    199e:	bc 01       	movw	r22, r24
    19a0:	cd 01       	movw	r24, r26
    19a2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__addsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8b 87       	std	Y+11, r24	; 0x0b
    19ac:	9c 87       	std	Y+12, r25	; 0x0c
    19ae:	ad 87       	std	Y+13, r26	; 0x0d
    19b0:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	1c f4       	brge	.+6      	; 0x19d0 <Receive_data+0x9e>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	b2 c0       	rjmp	.+356    	; 0x1b34 <Receive_data+0x202>
	else if (__tmp2 > 65535)
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	0c f0       	brlt	.+2      	; 0x19ea <Receive_data+0xb8>
    19e8:	7b c0       	rjmp	.+246    	; 0x1ae0 <Receive_data+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	6b 81       	ldd	r22, Y+3	; 0x03
    19f4:	7c 81       	ldd	r23, Y+4	; 0x04
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__divsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	88 8b       	std	Y+16, r24	; 0x10
    1a04:	99 8b       	std	Y+17, r25	; 0x11
    1a06:	aa 8b       	std	Y+18, r26	; 0x12
    1a08:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a ef       	ldi	r20, 0xFA	; 250
    1a10:	54 e4       	ldi	r21, 0x44	; 68
    1a12:	68 89       	ldd	r22, Y+16	; 0x10
    1a14:	79 89       	ldd	r23, Y+17	; 0x11
    1a16:	8a 89       	ldd	r24, Y+18	; 0x12
    1a18:	9b 89       	ldd	r25, Y+19	; 0x13
    1a1a:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8c 8b       	std	Y+20, r24	; 0x14
    1a24:	9d 8b       	std	Y+21, r25	; 0x15
    1a26:	ae 8b       	std	Y+22, r26	; 0x16
    1a28:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	6c 89       	ldd	r22, Y+20	; 0x14
    1a34:	7d 89       	ldd	r23, Y+21	; 0x15
    1a36:	8e 89       	ldd	r24, Y+22	; 0x16
    1a38:	9f 89       	ldd	r25, Y+23	; 0x17
    1a3a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <Receive_data+0x11a>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	99 8f       	std	Y+25, r25	; 0x19
    1a48:	88 8f       	std	Y+24, r24	; 0x18
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <Receive_data+0x198>
	else if (__tmp > 65535)
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	6c 89       	ldd	r22, Y+20	; 0x14
    1a56:	7d 89       	ldd	r23, Y+21	; 0x15
    1a58:	8e 89       	ldd	r24, Y+22	; 0x16
    1a5a:	9f 89       	ldd	r25, Y+23	; 0x17
    1a5c:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <Receive_data+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	68 89       	ldd	r22, Y+16	; 0x10
    1a6e:	79 89       	ldd	r23, Y+17	; 0x11
    1a70:	8a 89       	ldd	r24, Y+18	; 0x12
    1a72:	9b 89       	ldd	r25, Y+19	; 0x13
    1a74:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	99 8f       	std	Y+25, r25	; 0x19
    1a8a:	88 8f       	std	Y+24, r24	; 0x18
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <Receive_data+0x17a>
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9b 8f       	std	Y+27, r25	; 0x1b
    1a94:	8a 8f       	std	Y+26, r24	; 0x1a
    1a96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <Receive_data+0x168>
    1a9e:	9b 8f       	std	Y+27, r25	; 0x1b
    1aa0:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	88 8d       	ldd	r24, Y+24	; 0x18
    1aa4:	99 8d       	ldd	r25, Y+25	; 0x19
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	99 8f       	std	Y+25, r25	; 0x19
    1aaa:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	88 8d       	ldd	r24, Y+24	; 0x18
    1aae:	99 8d       	ldd	r25, Y+25	; 0x19
    1ab0:	89 2b       	or	r24, r25
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <Receive_data+0x15c>
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <Receive_data+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6c 89       	ldd	r22, Y+20	; 0x14
    1ab8:	7d 89       	ldd	r23, Y+21	; 0x15
    1aba:	8e 89       	ldd	r24, Y+22	; 0x16
    1abc:	9f 89       	ldd	r25, Y+23	; 0x17
    1abe:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	99 8f       	std	Y+25, r25	; 0x19
    1ac8:	88 8f       	std	Y+24, r24	; 0x18
    1aca:	88 8d       	ldd	r24, Y+24	; 0x18
    1acc:	99 8d       	ldd	r25, Y+25	; 0x19
    1ace:	9d 8f       	std	Y+29, r25	; 0x1d
    1ad0:	8c 8f       	std	Y+28, r24	; 0x1c
    1ad2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ad4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <Receive_data+0x1a4>
    1ada:	9d 8f       	std	Y+29, r25	; 0x1d
    1adc:	8c 8f       	std	Y+28, r24	; 0x1c
    1ade:	2a c0       	rjmp	.+84     	; 0x1b34 <Receive_data+0x202>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	53 e4       	ldi	r21, 0x43	; 67
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	ac f4       	brge	.+42     	; 0x1b22 <Receive_data+0x1f0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9f 8f       	std	Y+31, r25	; 0x1f
    1b0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b10:	99 a3       	std	Y+33, r25	; 0x21
    1b12:	88 a3       	std	Y+32, r24	; 0x20
    1b14:	88 a1       	ldd	r24, Y+32	; 0x20
    1b16:	99 a1       	ldd	r25, Y+33	; 0x21
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <Receive_data+0x1e6>
    1b1c:	99 a3       	std	Y+33, r25	; 0x21
    1b1e:	88 a3       	std	Y+32, r24	; 0x20
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <Receive_data+0x20e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8f 87       	std	Y+15, r24	; 0x0f
    1b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b36:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b38:	8a a1       	ldd	r24, Y+34	; 0x22
    1b3a:	8a 95       	dec	r24
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <Receive_data+0x208>
    1b3e:	8a a3       	std	Y+34, r24	; 0x22
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))				/* if high pulse is greater than 30ms */
    1b40:	89 e2       	ldi	r24, 0x29	; 41
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	fc 01       	movw	r30, r24
    1b46:	80 81       	ld	r24, Z
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	80 74       	andi	r24, 0x40	; 64
    1b4e:	99 27       	eor	r25, r25
    1b50:	89 2b       	or	r24, r25
    1b52:	51 f0       	breq	.+20     	; 0x1b68 <Receive_data+0x236>
		c = (c<<1)|(0x01);						/* then its logic HIGH */
    1b54:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <Receive_data+0x240>
		else									/* otherwise its logic LOW */
		c = (c<<1);
    1b68:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		while(PIND & (1<<DHT11_PIN));
    1b72:	00 00       	nop
    1b74:	89 e2       	ldi	r24, 0x29	; 41
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	fc 01       	movw	r30, r24
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	80 74       	andi	r24, 0x40	; 64
    1b82:	99 27       	eor	r25, r25
    1b84:	89 2b       	or	r24, r25
    1b86:	b1 f7       	brne	.-20     	; 0x1b74 <Receive_data+0x242>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()							/* receive data */
{
	for (int q=0; q<8; q++)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	08 97       	sbiw	r24, 0x08	; 8
    1b98:	0c f4       	brge	.+2      	; 0x1b9c <Receive_data+0x26a>
    1b9a:	d8 ce       	rjmp	.-592    	; 0x194c <Receive_data+0x1a>
		c = (c<<1)|(0x01);						/* then its logic HIGH */
		else									/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
    1b9c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
}
    1ba0:	a2 96       	adiw	r28, 0x22	; 34
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <main>:

int main(void)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	63 97       	sbiw	r28, 0x13	; 19
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
	char data[5];
	lcdinit();					/* initialize LCD */
    1bc6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <lcdinit>
	lcd_clear();				/* clear LCD */
    1bca:	0e 94 3d 0b 	call	0x167a	; 0x167a <lcd_clear>
	lcd_gotoxy(0,0);			/* enter column and row position */
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_gotoxy>
	lcd_print("Humidity =");
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
	lcd_gotoxy(0,1);
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_gotoxy>
	lcd_print("Temp = ");
    1be6:	8b e0       	ldi	r24, 0x0B	; 11
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
	
	while(1)
	{
		Request();				/* send start pulse */
    1bee:	0e 94 c6 0b 	call	0x178c	; 0x178c <Request>
		Response();				/* receive response */
    1bf2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
    1bf6:	0e 94 99 0c 	call	0x1932	; 0x1932 <Receive_data>
    1bfa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
    1bfe:	0e 94 99 0c 	call	0x1932	; 0x1932 <Receive_data>
    1c02:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
    1c06:	0e 94 99 0c 	call	0x1932	; 0x1932 <Receive_data>
    1c0a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
    1c0e:	0e 94 99 0c 	call	0x1932	; 0x1932 <Receive_data>
    1c12:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
    1c16:	0e 94 99 0c 	call	0x1932	; 0x1932 <Receive_data>
    1c1a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <CheckSum>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
    1c1e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <I_RH>
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <D_RH>
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	28 0f       	add	r18, r24
    1c30:	39 1f       	adc	r19, r25
    1c32:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <I_Temp>
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	28 0f       	add	r18, r24
    1c3c:	39 1f       	adc	r19, r25
    1c3e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <D_Temp>
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	28 0f       	add	r18, r24
    1c48:	39 1f       	adc	r19, r25
    1c4a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <CheckSum>
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	28 17       	cp	r18, r24
    1c54:	39 07       	cpc	r19, r25
    1c56:	49 f0       	breq	.+18     	; 0x1c6a <main+0xb8>
		{
			lcd_gotoxy(0,0);
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_gotoxy>
			lcd_print("Error");
    1c60:	83 e1       	ldi	r24, 0x13	; 19
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
    1c68:	6f c0       	rjmp	.+222    	; 0x1d48 <main+0x196>
		}
		
		else
		{
			itoa(I_RH,data,10);
    1c6a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <I_RH>
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 01       	movw	r18, r28
    1c74:	21 5f       	subi	r18, 0xF1	; 241
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	4a e0       	ldi	r20, 0x0A	; 10
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	0e 94 11 11 	call	0x2222	; 0x2222 <itoa>
			lcd_gotoxy(11,0);
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	8b e0       	ldi	r24, 0x0B	; 11
    1c86:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_gotoxy>
			lcd_print(data);
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	0f 96       	adiw	r24, 0x0f	; 15
    1c8e:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			lcd_print(".");
    1c92:	89 e1       	ldi	r24, 0x19	; 25
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			
			itoa(D_RH,data,10);
    1c9a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <D_RH>
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	21 5f       	subi	r18, 0xF1	; 241
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	4a e0       	ldi	r20, 0x0A	; 10
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	b9 01       	movw	r22, r18
    1cae:	0e 94 11 11 	call	0x2222	; 0x2222 <itoa>
			lcd_print(data);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0f 96       	adiw	r24, 0x0f	; 15
    1cb6:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			lcd_print("%");
    1cba:	8b e1       	ldi	r24, 0x1B	; 27
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>

			itoa(I_Temp,data,10);
    1cc2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <I_Temp>
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9e 01       	movw	r18, r28
    1ccc:	21 5f       	subi	r18, 0xF1	; 241
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	4a e0       	ldi	r20, 0x0A	; 10
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	0e 94 11 11 	call	0x2222	; 0x2222 <itoa>
			lcd_gotoxy(6,1);
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	86 e0       	ldi	r24, 0x06	; 6
    1cde:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <lcd_gotoxy>
			lcd_print(data);
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	0f 96       	adiw	r24, 0x0f	; 15
    1ce6:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			lcd_print(".");
    1cea:	89 e1       	ldi	r24, 0x19	; 25
    1cec:	91 e0       	ldi	r25, 0x01	; 1
    1cee:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			
			itoa(D_Temp,data,10);
    1cf2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <D_Temp>
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9e 01       	movw	r18, r28
    1cfc:	21 5f       	subi	r18, 0xF1	; 241
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	4a e0       	ldi	r20, 0x0A	; 10
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	b9 01       	movw	r22, r18
    1d06:	0e 94 11 11 	call	0x2222	; 0x2222 <itoa>
			lcd_print(data);
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	0f 96       	adiw	r24, 0x0f	; 15
    1d0e:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			lcddata(0xDF);
    1d12:	8f ed       	ldi	r24, 0xDF	; 223
    1d14:	0e 94 15 05 	call	0xa2a	; 0xa2a <lcddata>
			lcd_print("C ");
    1d18:	8d e1       	ldi	r24, 0x1D	; 29
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			
			itoa(CheckSum,data,10);
    1d20:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <CheckSum>
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9e 01       	movw	r18, r28
    1d2a:	21 5f       	subi	r18, 0xF1	; 241
    1d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2e:	4a e0       	ldi	r20, 0x0A	; 10
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	b9 01       	movw	r22, r18
    1d34:	0e 94 11 11 	call	0x2222	; 0x2222 <itoa>
			lcd_print(data);
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0f 96       	adiw	r24, 0x0f	; 15
    1d3c:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
			lcd_print(" ");
    1d40:	80 e2       	ldi	r24, 0x20	; 32
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	0e 94 08 0b 	call	0x1610	; 0x1610 <lcd_print>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	aa ef       	ldi	r26, 0xFA	; 250
    1d4e:	b3 e4       	ldi	r27, 0x43	; 67
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	ab 83       	std	Y+3, r26	; 0x03
    1d56:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	69 81       	ldd	r22, Y+1	; 0x01
    1d62:	7a 81       	ldd	r23, Y+2	; 0x02
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	af 83       	std	Y+7, r26	; 0x07
    1d76:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	6d 81       	ldd	r22, Y+5	; 0x05
    1d82:	7e 81       	ldd	r23, Y+6	; 0x06
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
    1d86:	98 85       	ldd	r25, Y+8	; 0x08
    1d88:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__cmpsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <main+0x1e8>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9a 87       	std	Y+10, r25	; 0x0a
    1d96:	89 87       	std	Y+9, r24	; 0x09
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <main+0x266>
	else if (__tmp > 65535)
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	6d 81       	ldd	r22, Y+5	; 0x05
    1da4:	7e 81       	ldd	r23, Y+6	; 0x06
    1da6:	8f 81       	ldd	r24, Y+7	; 0x07
    1da8:	98 85       	ldd	r25, Y+8	; 0x08
    1daa:	0e 94 9f 10 	call	0x213e	; 0x213e <__gesf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	69 81       	ldd	r22, Y+1	; 0x01
    1dbc:	7a 81       	ldd	r23, Y+2	; 0x02
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	0e 94 a4 10 	call	0x2148	; 0x2148 <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9a 87       	std	Y+10, r25	; 0x0a
    1dd8:	89 87       	std	Y+9, r24	; 0x09
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <main+0x248>
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9c 87       	std	Y+12, r25	; 0x0c
    1de2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <main+0x236>
    1dec:	9c 87       	std	Y+12, r25	; 0x0c
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	9a 87       	std	Y+10, r25	; 0x0a
    1df8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	89 2b       	or	r24, r25
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <main+0x22a>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	6d 81       	ldd	r22, Y+5	; 0x05
    1e06:	7e 81       	ldd	r23, Y+6	; 0x06
    1e08:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0a:	98 85       	ldd	r25, Y+8	; 0x08
    1e0c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9a 87       	std	Y+10, r25	; 0x0a
    1e16:	89 87       	std	Y+9, r24	; 0x09
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	9e 87       	std	Y+14, r25	; 0x0e
    1e1e:	8d 87       	std	Y+13, r24	; 0x0d
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <main+0x272>
    1e28:	9e 87       	std	Y+14, r25	; 0x0e
    1e2a:	8d 87       	std	Y+13, r24	; 0x0d
		}
		
		_delay_ms(500);
	}
    1e2c:	e0 ce       	rjmp	.-576    	; 0x1bee <main+0x3c>

00001e2e <__subsf3>:
    1e2e:	50 58       	subi	r21, 0x80	; 128

00001e30 <__addsf3>:
    1e30:	bb 27       	eor	r27, r27
    1e32:	aa 27       	eor	r26, r26
    1e34:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__addsf3x>
    1e38:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_round>
    1e3c:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_pscA>
    1e40:	38 f0       	brcs	.+14     	; 0x1e50 <__addsf3+0x20>
    1e42:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscB>
    1e46:	20 f0       	brcs	.+8      	; 0x1e50 <__addsf3+0x20>
    1e48:	39 f4       	brne	.+14     	; 0x1e58 <__addsf3+0x28>
    1e4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e4c:	19 f4       	brne	.+6      	; 0x1e54 <__addsf3+0x24>
    1e4e:	26 f4       	brtc	.+8      	; 0x1e58 <__addsf3+0x28>
    1e50:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__fp_nan>
    1e54:	0e f4       	brtc	.+2      	; 0x1e58 <__addsf3+0x28>
    1e56:	e0 95       	com	r30
    1e58:	e7 fb       	bst	r30, 7
    1e5a:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__fp_inf>

00001e5e <__addsf3x>:
    1e5e:	e9 2f       	mov	r30, r25
    1e60:	0e 94 76 10 	call	0x20ec	; 0x20ec <__fp_split3>
    1e64:	58 f3       	brcs	.-42     	; 0x1e3c <__addsf3+0xc>
    1e66:	ba 17       	cp	r27, r26
    1e68:	62 07       	cpc	r22, r18
    1e6a:	73 07       	cpc	r23, r19
    1e6c:	84 07       	cpc	r24, r20
    1e6e:	95 07       	cpc	r25, r21
    1e70:	20 f0       	brcs	.+8      	; 0x1e7a <__addsf3x+0x1c>
    1e72:	79 f4       	brne	.+30     	; 0x1e92 <__addsf3x+0x34>
    1e74:	a6 f5       	brtc	.+104    	; 0x1ede <__addsf3x+0x80>
    1e76:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__fp_zero>
    1e7a:	0e f4       	brtc	.+2      	; 0x1e7e <__addsf3x+0x20>
    1e7c:	e0 95       	com	r30
    1e7e:	0b 2e       	mov	r0, r27
    1e80:	ba 2f       	mov	r27, r26
    1e82:	a0 2d       	mov	r26, r0
    1e84:	0b 01       	movw	r0, r22
    1e86:	b9 01       	movw	r22, r18
    1e88:	90 01       	movw	r18, r0
    1e8a:	0c 01       	movw	r0, r24
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	a0 01       	movw	r20, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	ff 27       	eor	r31, r31
    1e94:	59 1b       	sub	r21, r25
    1e96:	99 f0       	breq	.+38     	; 0x1ebe <__addsf3x+0x60>
    1e98:	59 3f       	cpi	r21, 0xF9	; 249
    1e9a:	50 f4       	brcc	.+20     	; 0x1eb0 <__addsf3x+0x52>
    1e9c:	50 3e       	cpi	r21, 0xE0	; 224
    1e9e:	68 f1       	brcs	.+90     	; 0x1efa <__addsf3x+0x9c>
    1ea0:	1a 16       	cp	r1, r26
    1ea2:	f0 40       	sbci	r31, 0x00	; 0
    1ea4:	a2 2f       	mov	r26, r18
    1ea6:	23 2f       	mov	r18, r19
    1ea8:	34 2f       	mov	r19, r20
    1eaa:	44 27       	eor	r20, r20
    1eac:	58 5f       	subi	r21, 0xF8	; 248
    1eae:	f3 cf       	rjmp	.-26     	; 0x1e96 <__addsf3x+0x38>
    1eb0:	46 95       	lsr	r20
    1eb2:	37 95       	ror	r19
    1eb4:	27 95       	ror	r18
    1eb6:	a7 95       	ror	r26
    1eb8:	f0 40       	sbci	r31, 0x00	; 0
    1eba:	53 95       	inc	r21
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__addsf3x+0x52>
    1ebe:	7e f4       	brtc	.+30     	; 0x1ede <__addsf3x+0x80>
    1ec0:	1f 16       	cp	r1, r31
    1ec2:	ba 0b       	sbc	r27, r26
    1ec4:	62 0b       	sbc	r22, r18
    1ec6:	73 0b       	sbc	r23, r19
    1ec8:	84 0b       	sbc	r24, r20
    1eca:	ba f0       	brmi	.+46     	; 0x1efa <__addsf3x+0x9c>
    1ecc:	91 50       	subi	r25, 0x01	; 1
    1ece:	a1 f0       	breq	.+40     	; 0x1ef8 <__addsf3x+0x9a>
    1ed0:	ff 0f       	add	r31, r31
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	66 1f       	adc	r22, r22
    1ed6:	77 1f       	adc	r23, r23
    1ed8:	88 1f       	adc	r24, r24
    1eda:	c2 f7       	brpl	.-16     	; 0x1ecc <__addsf3x+0x6e>
    1edc:	0e c0       	rjmp	.+28     	; 0x1efa <__addsf3x+0x9c>
    1ede:	ba 0f       	add	r27, r26
    1ee0:	62 1f       	adc	r22, r18
    1ee2:	73 1f       	adc	r23, r19
    1ee4:	84 1f       	adc	r24, r20
    1ee6:	48 f4       	brcc	.+18     	; 0x1efa <__addsf3x+0x9c>
    1ee8:	87 95       	ror	r24
    1eea:	77 95       	ror	r23
    1eec:	67 95       	ror	r22
    1eee:	b7 95       	ror	r27
    1ef0:	f7 95       	ror	r31
    1ef2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <__addsf3x+0x9a>
    1ef6:	b0 cf       	rjmp	.-160    	; 0x1e58 <__addsf3+0x28>
    1ef8:	93 95       	inc	r25
    1efa:	88 0f       	add	r24, r24
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <__addsf3x+0xa2>
    1efe:	99 27       	eor	r25, r25
    1f00:	ee 0f       	add	r30, r30
    1f02:	97 95       	ror	r25
    1f04:	87 95       	ror	r24
    1f06:	08 95       	ret

00001f08 <__cmpsf2>:
    1f08:	0e 94 2a 10 	call	0x2054	; 0x2054 <__fp_cmp>
    1f0c:	08 f4       	brcc	.+2      	; 0x1f10 <__cmpsf2+0x8>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	08 95       	ret

00001f12 <__divsf3>:
    1f12:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__divsf3x>
    1f16:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_round>
    1f1a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscB>
    1f1e:	58 f0       	brcs	.+22     	; 0x1f36 <__divsf3+0x24>
    1f20:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_pscA>
    1f24:	40 f0       	brcs	.+16     	; 0x1f36 <__divsf3+0x24>
    1f26:	29 f4       	brne	.+10     	; 0x1f32 <__divsf3+0x20>
    1f28:	5f 3f       	cpi	r21, 0xFF	; 255
    1f2a:	29 f0       	breq	.+10     	; 0x1f36 <__divsf3+0x24>
    1f2c:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__fp_inf>
    1f30:	51 11       	cpse	r21, r1
    1f32:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__fp_szero>
    1f36:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__fp_nan>

00001f3a <__divsf3x>:
    1f3a:	0e 94 76 10 	call	0x20ec	; 0x20ec <__fp_split3>
    1f3e:	68 f3       	brcs	.-38     	; 0x1f1a <__divsf3+0x8>

00001f40 <__divsf3_pse>:
    1f40:	99 23       	and	r25, r25
    1f42:	b1 f3       	breq	.-20     	; 0x1f30 <__divsf3+0x1e>
    1f44:	55 23       	and	r21, r21
    1f46:	91 f3       	breq	.-28     	; 0x1f2c <__divsf3+0x1a>
    1f48:	95 1b       	sub	r25, r21
    1f4a:	55 0b       	sbc	r21, r21
    1f4c:	bb 27       	eor	r27, r27
    1f4e:	aa 27       	eor	r26, r26
    1f50:	62 17       	cp	r22, r18
    1f52:	73 07       	cpc	r23, r19
    1f54:	84 07       	cpc	r24, r20
    1f56:	38 f0       	brcs	.+14     	; 0x1f66 <__divsf3_pse+0x26>
    1f58:	9f 5f       	subi	r25, 0xFF	; 255
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	aa 1f       	adc	r26, r26
    1f64:	a9 f3       	breq	.-22     	; 0x1f50 <__divsf3_pse+0x10>
    1f66:	35 d0       	rcall	.+106    	; 0x1fd2 <__divsf3_pse+0x92>
    1f68:	0e 2e       	mov	r0, r30
    1f6a:	3a f0       	brmi	.+14     	; 0x1f7a <__divsf3_pse+0x3a>
    1f6c:	e0 e8       	ldi	r30, 0x80	; 128
    1f6e:	32 d0       	rcall	.+100    	; 0x1fd4 <__divsf3_pse+0x94>
    1f70:	91 50       	subi	r25, 0x01	; 1
    1f72:	50 40       	sbci	r21, 0x00	; 0
    1f74:	e6 95       	lsr	r30
    1f76:	00 1c       	adc	r0, r0
    1f78:	ca f7       	brpl	.-14     	; 0x1f6c <__divsf3_pse+0x2c>
    1f7a:	2b d0       	rcall	.+86     	; 0x1fd2 <__divsf3_pse+0x92>
    1f7c:	fe 2f       	mov	r31, r30
    1f7e:	29 d0       	rcall	.+82     	; 0x1fd2 <__divsf3_pse+0x92>
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	88 1f       	adc	r24, r24
    1f86:	bb 1f       	adc	r27, r27
    1f88:	26 17       	cp	r18, r22
    1f8a:	37 07       	cpc	r19, r23
    1f8c:	48 07       	cpc	r20, r24
    1f8e:	ab 07       	cpc	r26, r27
    1f90:	b0 e8       	ldi	r27, 0x80	; 128
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <__divsf3_pse+0x56>
    1f94:	bb 0b       	sbc	r27, r27
    1f96:	80 2d       	mov	r24, r0
    1f98:	bf 01       	movw	r22, r30
    1f9a:	ff 27       	eor	r31, r31
    1f9c:	93 58       	subi	r25, 0x83	; 131
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	3a f0       	brmi	.+14     	; 0x1fb0 <__divsf3_pse+0x70>
    1fa2:	9e 3f       	cpi	r25, 0xFE	; 254
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	78 f0       	brcs	.+30     	; 0x1fc6 <__divsf3_pse+0x86>
    1fa8:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__fp_inf>
    1fac:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__fp_szero>
    1fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb2:	e4 f3       	brlt	.-8      	; 0x1fac <__divsf3_pse+0x6c>
    1fb4:	98 3e       	cpi	r25, 0xE8	; 232
    1fb6:	d4 f3       	brlt	.-12     	; 0x1fac <__divsf3_pse+0x6c>
    1fb8:	86 95       	lsr	r24
    1fba:	77 95       	ror	r23
    1fbc:	67 95       	ror	r22
    1fbe:	b7 95       	ror	r27
    1fc0:	f7 95       	ror	r31
    1fc2:	9f 5f       	subi	r25, 0xFF	; 255
    1fc4:	c9 f7       	brne	.-14     	; 0x1fb8 <__divsf3_pse+0x78>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	91 1d       	adc	r25, r1
    1fca:	96 95       	lsr	r25
    1fcc:	87 95       	ror	r24
    1fce:	97 f9       	bld	r25, 7
    1fd0:	08 95       	ret
    1fd2:	e1 e0       	ldi	r30, 0x01	; 1
    1fd4:	66 0f       	add	r22, r22
    1fd6:	77 1f       	adc	r23, r23
    1fd8:	88 1f       	adc	r24, r24
    1fda:	bb 1f       	adc	r27, r27
    1fdc:	62 17       	cp	r22, r18
    1fde:	73 07       	cpc	r23, r19
    1fe0:	84 07       	cpc	r24, r20
    1fe2:	ba 07       	cpc	r27, r26
    1fe4:	20 f0       	brcs	.+8      	; 0x1fee <__divsf3_pse+0xae>
    1fe6:	62 1b       	sub	r22, r18
    1fe8:	73 0b       	sbc	r23, r19
    1fea:	84 0b       	sbc	r24, r20
    1fec:	ba 0b       	sbc	r27, r26
    1fee:	ee 1f       	adc	r30, r30
    1ff0:	88 f7       	brcc	.-30     	; 0x1fd4 <__divsf3_pse+0x94>
    1ff2:	e0 95       	com	r30
    1ff4:	08 95       	ret

00001ff6 <__fixunssfsi>:
    1ff6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__fp_splitA>
    1ffa:	88 f0       	brcs	.+34     	; 0x201e <__fixunssfsi+0x28>
    1ffc:	9f 57       	subi	r25, 0x7F	; 127
    1ffe:	98 f0       	brcs	.+38     	; 0x2026 <__fixunssfsi+0x30>
    2000:	b9 2f       	mov	r27, r25
    2002:	99 27       	eor	r25, r25
    2004:	b7 51       	subi	r27, 0x17	; 23
    2006:	b0 f0       	brcs	.+44     	; 0x2034 <__fixunssfsi+0x3e>
    2008:	e1 f0       	breq	.+56     	; 0x2042 <__fixunssfsi+0x4c>
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	1a f0       	brmi	.+6      	; 0x201a <__fixunssfsi+0x24>
    2014:	ba 95       	dec	r27
    2016:	c9 f7       	brne	.-14     	; 0x200a <__fixunssfsi+0x14>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <__fixunssfsi+0x4c>
    201a:	b1 30       	cpi	r27, 0x01	; 1
    201c:	91 f0       	breq	.+36     	; 0x2042 <__fixunssfsi+0x4c>
    201e:	0e 94 98 10 	call	0x2130	; 0x2130 <__fp_zero>
    2022:	b1 e0       	ldi	r27, 0x01	; 1
    2024:	08 95       	ret
    2026:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__fp_zero>
    202a:	67 2f       	mov	r22, r23
    202c:	78 2f       	mov	r23, r24
    202e:	88 27       	eor	r24, r24
    2030:	b8 5f       	subi	r27, 0xF8	; 248
    2032:	39 f0       	breq	.+14     	; 0x2042 <__fixunssfsi+0x4c>
    2034:	b9 3f       	cpi	r27, 0xF9	; 249
    2036:	cc f3       	brlt	.-14     	; 0x202a <__fixunssfsi+0x34>
    2038:	86 95       	lsr	r24
    203a:	77 95       	ror	r23
    203c:	67 95       	ror	r22
    203e:	b3 95       	inc	r27
    2040:	d9 f7       	brne	.-10     	; 0x2038 <__fixunssfsi+0x42>
    2042:	3e f4       	brtc	.+14     	; 0x2052 <__fixunssfsi+0x5c>
    2044:	90 95       	com	r25
    2046:	80 95       	com	r24
    2048:	70 95       	com	r23
    204a:	61 95       	neg	r22
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	8f 4f       	sbci	r24, 0xFF	; 255
    2050:	9f 4f       	sbci	r25, 0xFF	; 255
    2052:	08 95       	ret

00002054 <__fp_cmp>:
    2054:	99 0f       	add	r25, r25
    2056:	00 08       	sbc	r0, r0
    2058:	55 0f       	add	r21, r21
    205a:	aa 0b       	sbc	r26, r26
    205c:	e0 e8       	ldi	r30, 0x80	; 128
    205e:	fe ef       	ldi	r31, 0xFE	; 254
    2060:	16 16       	cp	r1, r22
    2062:	17 06       	cpc	r1, r23
    2064:	e8 07       	cpc	r30, r24
    2066:	f9 07       	cpc	r31, r25
    2068:	c0 f0       	brcs	.+48     	; 0x209a <__fp_cmp+0x46>
    206a:	12 16       	cp	r1, r18
    206c:	13 06       	cpc	r1, r19
    206e:	e4 07       	cpc	r30, r20
    2070:	f5 07       	cpc	r31, r21
    2072:	98 f0       	brcs	.+38     	; 0x209a <__fp_cmp+0x46>
    2074:	62 1b       	sub	r22, r18
    2076:	73 0b       	sbc	r23, r19
    2078:	84 0b       	sbc	r24, r20
    207a:	95 0b       	sbc	r25, r21
    207c:	39 f4       	brne	.+14     	; 0x208c <__fp_cmp+0x38>
    207e:	0a 26       	eor	r0, r26
    2080:	61 f0       	breq	.+24     	; 0x209a <__fp_cmp+0x46>
    2082:	23 2b       	or	r18, r19
    2084:	24 2b       	or	r18, r20
    2086:	25 2b       	or	r18, r21
    2088:	21 f4       	brne	.+8      	; 0x2092 <__fp_cmp+0x3e>
    208a:	08 95       	ret
    208c:	0a 26       	eor	r0, r26
    208e:	09 f4       	brne	.+2      	; 0x2092 <__fp_cmp+0x3e>
    2090:	a1 40       	sbci	r26, 0x01	; 1
    2092:	a6 95       	lsr	r26
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	81 1d       	adc	r24, r1
    2098:	81 1d       	adc	r24, r1
    209a:	08 95       	ret

0000209c <__fp_inf>:
    209c:	97 f9       	bld	r25, 7
    209e:	9f 67       	ori	r25, 0x7F	; 127
    20a0:	80 e8       	ldi	r24, 0x80	; 128
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	08 95       	ret

000020a8 <__fp_nan>:
    20a8:	9f ef       	ldi	r25, 0xFF	; 255
    20aa:	80 ec       	ldi	r24, 0xC0	; 192
    20ac:	08 95       	ret

000020ae <__fp_pscA>:
    20ae:	00 24       	eor	r0, r0
    20b0:	0a 94       	dec	r0
    20b2:	16 16       	cp	r1, r22
    20b4:	17 06       	cpc	r1, r23
    20b6:	18 06       	cpc	r1, r24
    20b8:	09 06       	cpc	r0, r25
    20ba:	08 95       	ret

000020bc <__fp_pscB>:
    20bc:	00 24       	eor	r0, r0
    20be:	0a 94       	dec	r0
    20c0:	12 16       	cp	r1, r18
    20c2:	13 06       	cpc	r1, r19
    20c4:	14 06       	cpc	r1, r20
    20c6:	05 06       	cpc	r0, r21
    20c8:	08 95       	ret

000020ca <__fp_round>:
    20ca:	09 2e       	mov	r0, r25
    20cc:	03 94       	inc	r0
    20ce:	00 0c       	add	r0, r0
    20d0:	11 f4       	brne	.+4      	; 0x20d6 <__fp_round+0xc>
    20d2:	88 23       	and	r24, r24
    20d4:	52 f0       	brmi	.+20     	; 0x20ea <__fp_round+0x20>
    20d6:	bb 0f       	add	r27, r27
    20d8:	40 f4       	brcc	.+16     	; 0x20ea <__fp_round+0x20>
    20da:	bf 2b       	or	r27, r31
    20dc:	11 f4       	brne	.+4      	; 0x20e2 <__fp_round+0x18>
    20de:	60 ff       	sbrs	r22, 0
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <__fp_round+0x20>
    20e2:	6f 5f       	subi	r22, 0xFF	; 255
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	08 95       	ret

000020ec <__fp_split3>:
    20ec:	57 fd       	sbrc	r21, 7
    20ee:	90 58       	subi	r25, 0x80	; 128
    20f0:	44 0f       	add	r20, r20
    20f2:	55 1f       	adc	r21, r21
    20f4:	59 f0       	breq	.+22     	; 0x210c <__fp_splitA+0x10>
    20f6:	5f 3f       	cpi	r21, 0xFF	; 255
    20f8:	71 f0       	breq	.+28     	; 0x2116 <__fp_splitA+0x1a>
    20fa:	47 95       	ror	r20

000020fc <__fp_splitA>:
    20fc:	88 0f       	add	r24, r24
    20fe:	97 fb       	bst	r25, 7
    2100:	99 1f       	adc	r25, r25
    2102:	61 f0       	breq	.+24     	; 0x211c <__fp_splitA+0x20>
    2104:	9f 3f       	cpi	r25, 0xFF	; 255
    2106:	79 f0       	breq	.+30     	; 0x2126 <__fp_splitA+0x2a>
    2108:	87 95       	ror	r24
    210a:	08 95       	ret
    210c:	12 16       	cp	r1, r18
    210e:	13 06       	cpc	r1, r19
    2110:	14 06       	cpc	r1, r20
    2112:	55 1f       	adc	r21, r21
    2114:	f2 cf       	rjmp	.-28     	; 0x20fa <__fp_split3+0xe>
    2116:	46 95       	lsr	r20
    2118:	f1 df       	rcall	.-30     	; 0x20fc <__fp_splitA>
    211a:	08 c0       	rjmp	.+16     	; 0x212c <__fp_splitA+0x30>
    211c:	16 16       	cp	r1, r22
    211e:	17 06       	cpc	r1, r23
    2120:	18 06       	cpc	r1, r24
    2122:	99 1f       	adc	r25, r25
    2124:	f1 cf       	rjmp	.-30     	; 0x2108 <__fp_splitA+0xc>
    2126:	86 95       	lsr	r24
    2128:	71 05       	cpc	r23, r1
    212a:	61 05       	cpc	r22, r1
    212c:	08 94       	sec
    212e:	08 95       	ret

00002130 <__fp_zero>:
    2130:	e8 94       	clt

00002132 <__fp_szero>:
    2132:	bb 27       	eor	r27, r27
    2134:	66 27       	eor	r22, r22
    2136:	77 27       	eor	r23, r23
    2138:	cb 01       	movw	r24, r22
    213a:	97 f9       	bld	r25, 7
    213c:	08 95       	ret

0000213e <__gesf2>:
    213e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__fp_cmp>
    2142:	08 f4       	brcc	.+2      	; 0x2146 <__gesf2+0x8>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	08 95       	ret

00002148 <__mulsf3>:
    2148:	0e 94 b7 10 	call	0x216e	; 0x216e <__mulsf3x>
    214c:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__fp_round>
    2150:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_pscA>
    2154:	38 f0       	brcs	.+14     	; 0x2164 <__mulsf3+0x1c>
    2156:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscB>
    215a:	20 f0       	brcs	.+8      	; 0x2164 <__mulsf3+0x1c>
    215c:	95 23       	and	r25, r21
    215e:	11 f0       	breq	.+4      	; 0x2164 <__mulsf3+0x1c>
    2160:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__fp_inf>
    2164:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__fp_nan>
    2168:	11 24       	eor	r1, r1
    216a:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__fp_szero>

0000216e <__mulsf3x>:
    216e:	0e 94 76 10 	call	0x20ec	; 0x20ec <__fp_split3>
    2172:	70 f3       	brcs	.-36     	; 0x2150 <__mulsf3+0x8>

00002174 <__mulsf3_pse>:
    2174:	95 9f       	mul	r25, r21
    2176:	c1 f3       	breq	.-16     	; 0x2168 <__mulsf3+0x20>
    2178:	95 0f       	add	r25, r21
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	55 1f       	adc	r21, r21
    217e:	62 9f       	mul	r22, r18
    2180:	f0 01       	movw	r30, r0
    2182:	72 9f       	mul	r23, r18
    2184:	bb 27       	eor	r27, r27
    2186:	f0 0d       	add	r31, r0
    2188:	b1 1d       	adc	r27, r1
    218a:	63 9f       	mul	r22, r19
    218c:	aa 27       	eor	r26, r26
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	aa 1f       	adc	r26, r26
    2194:	64 9f       	mul	r22, r20
    2196:	66 27       	eor	r22, r22
    2198:	b0 0d       	add	r27, r0
    219a:	a1 1d       	adc	r26, r1
    219c:	66 1f       	adc	r22, r22
    219e:	82 9f       	mul	r24, r18
    21a0:	22 27       	eor	r18, r18
    21a2:	b0 0d       	add	r27, r0
    21a4:	a1 1d       	adc	r26, r1
    21a6:	62 1f       	adc	r22, r18
    21a8:	73 9f       	mul	r23, r19
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	83 9f       	mul	r24, r19
    21b2:	a0 0d       	add	r26, r0
    21b4:	61 1d       	adc	r22, r1
    21b6:	22 1f       	adc	r18, r18
    21b8:	74 9f       	mul	r23, r20
    21ba:	33 27       	eor	r19, r19
    21bc:	a0 0d       	add	r26, r0
    21be:	61 1d       	adc	r22, r1
    21c0:	23 1f       	adc	r18, r19
    21c2:	84 9f       	mul	r24, r20
    21c4:	60 0d       	add	r22, r0
    21c6:	21 1d       	adc	r18, r1
    21c8:	82 2f       	mov	r24, r18
    21ca:	76 2f       	mov	r23, r22
    21cc:	6a 2f       	mov	r22, r26
    21ce:	11 24       	eor	r1, r1
    21d0:	9f 57       	subi	r25, 0x7F	; 127
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	9a f0       	brmi	.+38     	; 0x21fc <__mulsf3_pse+0x88>
    21d6:	f1 f0       	breq	.+60     	; 0x2214 <__mulsf3_pse+0xa0>
    21d8:	88 23       	and	r24, r24
    21da:	4a f0       	brmi	.+18     	; 0x21ee <__mulsf3_pse+0x7a>
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	bb 1f       	adc	r27, r27
    21e2:	66 1f       	adc	r22, r22
    21e4:	77 1f       	adc	r23, r23
    21e6:	88 1f       	adc	r24, r24
    21e8:	91 50       	subi	r25, 0x01	; 1
    21ea:	50 40       	sbci	r21, 0x00	; 0
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__mulsf3_pse+0x64>
    21ee:	9e 3f       	cpi	r25, 0xFE	; 254
    21f0:	51 05       	cpc	r21, r1
    21f2:	80 f0       	brcs	.+32     	; 0x2214 <__mulsf3_pse+0xa0>
    21f4:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__fp_inf>
    21f8:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__fp_szero>
    21fc:	5f 3f       	cpi	r21, 0xFF	; 255
    21fe:	e4 f3       	brlt	.-8      	; 0x21f8 <__mulsf3_pse+0x84>
    2200:	98 3e       	cpi	r25, 0xE8	; 232
    2202:	d4 f3       	brlt	.-12     	; 0x21f8 <__mulsf3_pse+0x84>
    2204:	86 95       	lsr	r24
    2206:	77 95       	ror	r23
    2208:	67 95       	ror	r22
    220a:	b7 95       	ror	r27
    220c:	f7 95       	ror	r31
    220e:	e7 95       	ror	r30
    2210:	9f 5f       	subi	r25, 0xFF	; 255
    2212:	c1 f7       	brne	.-16     	; 0x2204 <__mulsf3_pse+0x90>
    2214:	fe 2b       	or	r31, r30
    2216:	88 0f       	add	r24, r24
    2218:	91 1d       	adc	r25, r1
    221a:	96 95       	lsr	r25
    221c:	87 95       	ror	r24
    221e:	97 f9       	bld	r25, 7
    2220:	08 95       	ret

00002222 <itoa>:
    2222:	45 32       	cpi	r20, 0x25	; 37
    2224:	51 05       	cpc	r21, r1
    2226:	20 f4       	brcc	.+8      	; 0x2230 <itoa+0xe>
    2228:	42 30       	cpi	r20, 0x02	; 2
    222a:	10 f0       	brcs	.+4      	; 0x2230 <itoa+0xe>
    222c:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__itoa_ncheck>
    2230:	fb 01       	movw	r30, r22
    2232:	10 82       	st	Z, r1
    2234:	cb 01       	movw	r24, r22
    2236:	08 95       	ret

00002238 <__itoa_ncheck>:
    2238:	bb 27       	eor	r27, r27
    223a:	4a 30       	cpi	r20, 0x0A	; 10
    223c:	31 f4       	brne	.+12     	; 0x224a <__itoa_ncheck+0x12>
    223e:	99 23       	and	r25, r25
    2240:	22 f4       	brpl	.+8      	; 0x224a <__itoa_ncheck+0x12>
    2242:	bd e2       	ldi	r27, 0x2D	; 45
    2244:	90 95       	com	r25
    2246:	81 95       	neg	r24
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__utoa_common>

0000224e <__utoa_ncheck>:
    224e:	bb 27       	eor	r27, r27

00002250 <__utoa_common>:
    2250:	fb 01       	movw	r30, r22
    2252:	55 27       	eor	r21, r21
    2254:	aa 27       	eor	r26, r26
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	aa 1f       	adc	r26, r26
    225c:	a4 17       	cp	r26, r20
    225e:	10 f0       	brcs	.+4      	; 0x2264 <__utoa_common+0x14>
    2260:	a4 1b       	sub	r26, r20
    2262:	83 95       	inc	r24
    2264:	50 51       	subi	r21, 0x10	; 16
    2266:	b9 f7       	brne	.-18     	; 0x2256 <__utoa_common+0x6>
    2268:	a0 5d       	subi	r26, 0xD0	; 208
    226a:	aa 33       	cpi	r26, 0x3A	; 58
    226c:	08 f0       	brcs	.+2      	; 0x2270 <__utoa_common+0x20>
    226e:	a9 5d       	subi	r26, 0xD9	; 217
    2270:	a1 93       	st	Z+, r26
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	79 f7       	brne	.-34     	; 0x2254 <__utoa_common+0x4>
    2276:	b1 11       	cpse	r27, r1
    2278:	b1 93       	st	Z+, r27
    227a:	11 92       	st	Z+, r1
    227c:	cb 01       	movw	r24, r22
    227e:	0c 94 41 11 	jmp	0x2282	; 0x2282 <strrev>

00002282 <strrev>:
    2282:	dc 01       	movw	r26, r24
    2284:	fc 01       	movw	r30, r24
    2286:	67 2f       	mov	r22, r23
    2288:	71 91       	ld	r23, Z+
    228a:	77 23       	and	r23, r23
    228c:	e1 f7       	brne	.-8      	; 0x2286 <strrev+0x4>
    228e:	32 97       	sbiw	r30, 0x02	; 2
    2290:	04 c0       	rjmp	.+8      	; 0x229a <strrev+0x18>
    2292:	7c 91       	ld	r23, X
    2294:	6d 93       	st	X+, r22
    2296:	70 83       	st	Z, r23
    2298:	62 91       	ld	r22, -Z
    229a:	ae 17       	cp	r26, r30
    229c:	bf 07       	cpc	r27, r31
    229e:	c8 f3       	brcs	.-14     	; 0x2292 <strrev+0x10>
    22a0:	08 95       	ret

000022a2 <_exit>:
    22a2:	f8 94       	cli

000022a4 <__stop_program>:
    22a4:	ff cf       	rjmp	.-2      	; 0x22a4 <__stop_program>
